"use strict";(self.webpackChunksubsquid_docs=self.webpackChunksubsquid_docs||[]).push([[628],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return m}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var d=r.createContext({}),l=function(e){var n=r.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=l(e.components);return r.createElement(d.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,d=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=l(t),m=a,f=u["".concat(d,".").concat(m)]||u[m]||p[m]||i;return t?r.createElement(f,o(o({ref:n},s),{},{components:t})):r.createElement(f,o({ref:n},s))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=u;var c={};for(var d in n)hasOwnProperty.call(n,d)&&(c[d]=n[d]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var l=2;l<i;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},89914:function(e,n,t){t.r(n),t.d(n,{assets:function(){return s},contentTitle:function(){return d},default:function(){return m},frontMatter:function(){return c},metadata:function(){return l},toc:function(){return p}});var r=t(87462),a=t(63366),i=(t(67294),t(3905)),o=["components"],c={},d="Interfaces",l={unversionedId:"reference/openreader-schema/interfaces",id:"reference/openreader-schema/interfaces",title:"Interfaces",description:'{% hint style="danger" %}',source:"@site/docs/reference/openreader-schema/interfaces.md",sourceDirName:"reference/openreader-schema",slug:"/reference/openreader-schema/interfaces",permalink:"/docs/reference/openreader-schema/interfaces",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/reference/openreader-schema/interfaces.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Full text search",permalink:"/docs/reference/openreader-schema/full-text-search"},next:{title:"JSON fields",permalink:"/docs/reference/openreader-schema/json-fields"}},s={},p=[],u={toc:p};function m(e){var n=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"interfaces"},"Interfaces"),(0,i.kt)("p",null,'{% hint style="danger" %}\nSupport for Interfaces has been dropped in v5. They could be introduced if in demand by the community.'),(0,i.kt)("p",null,"Reach out and let the Subsquid team know if and how you would need them.\n{% endhint %}"),(0,i.kt)("p",null,"Interfaces are a common pattern across type definition systems and object oriented programming languages. An ",(0,i.kt)("a",{parentName:"p",href:"https://graphql.org/learn/schema/#interfaces"},(0,i.kt)("em",{parentName:"a"},"Interface"))," is commonly defined as an abstract type that includes a certain set of fields that a type must include to implement the interface."),(0,i.kt)("p",null,"To look at an example of Interface, the schema used in ",(0,i.kt)("a",{parentName:"p",href:"/docs/tutorial/create-a-simple-squid"},"this Tutorial")," can be used:"),(0,i.kt)("p",null,'{% code title="schema.graphql" %}'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},'type Account @entity {\n  id: ID! #Account address\n  workReports: [WorkReport] @derivedFrom(field: "account")\n  joinGroups: [JoinGroup] @derivedFrom(field: "member")\n  storageOrders: [StorageOrder] @derivedFrom (field: "account")\n}\n\ntype WorkReport @entity {\n  id: ID! #event id\n  account: Account!\n  addedFiles: [[String]]\n  deletedFiles: [[String]]\n  extrinisicId: String\n  createdAt: DateTime!\n  blockHash: String!\n  blockNum: Int!\n}\n\ntype JoinGroup @entity {\n  id: ID!\n  member: Account!\n  owner: String!\n  extrinisicId: String\n  createdAt: DateTime!\n  blockHash: String!\n  blockNum: Int!\n}\n\ntype StorageOrder @entity {\n  id: ID!\n  account: Account!\n  fileCid: String!\n  extrinisicId: String\n  createdAt: DateTime!\n  blockHash: String!\n  blockNum: Int!\n}\n\n')),(0,i.kt)("p",null,"{% endcode %}"),(0,i.kt)("p",null,"As you can see, the ",(0,i.kt)("inlineCode",{parentName:"p"},"WorkReport"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"JoinGroup"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"StorageOrder")," entities have a few fields in common, namely: ",(0,i.kt)("inlineCode",{parentName:"p"},"id"),",  ",(0,i.kt)("inlineCode",{parentName:"p"},"extrinisicId"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"createdAt"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"blockHash"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"blockNum"),"."),(0,i.kt)("p",null,"To group the common fields we could define an Interface, named ",(0,i.kt)("inlineCode",{parentName:"p"},"EventInfo"),", for example:"),(0,i.kt)("p",null,"The schema itself won't change much, it might even look like there's some repetition:"),(0,i.kt)("p",null,'{% code title="interface_schema.graphql" %}'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},'type Account @entity {\n  id: ID! #Account address\n  workReports: [WorkReport] @derivedFrom(field: "account")\n  joinGroups: [JoinGroup] @derivedFrom(field: "member")\n  storageOrders: [StorageOrder] @derivedFrom (field: "account")\n}\n\ninterface EventInfo {\n  id: ID!\n  extrinisicId: String\n  createdAt: DateTime!\n  blockHash: String!\n  blockNum: Int!\n}\n\ntype WorkReport implements EventInfo @entity {\n  id: ID! #event id\n  account: Account!\n  addedFiles: [[String]]\n  deletedFiles: [[String]]\n  extrinisicId: String\n  createdAt: DateTime!\n  blockHash: String!\n  blockNum: Int!\n}\n\ntype JoinGroup implements EventInfo @entity {\n  id: ID!\n  member: Account!\n  owner: String!\n  extrinisicId: String\n  createdAt: DateTime!\n  blockHash: String!\n  blockNum: Int!\n}\n\ntype StorageOrder implements EventInfo @entity {\n  id: ID!\n  account: Account!\n  fileCid: String!\n  extrinisicId: String\n  createdAt: DateTime!\n  blockHash: String!\n  blockNum: Int!\n}\n\n')),(0,i.kt)("p",null,"{% endcode %}"),(0,i.kt)("p",null,"What we gained here is that if we were to implement a custom query, for example a simple one: ",(0,i.kt)("inlineCode",{parentName:"p"},"EventById"),", this would be able to return any and all 3 different types, depending on the specified ID. We would have to use a specific syntax to obtain the extra field that are specific to each particular type implementation:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"query EventById($id: ID!) {\n  event(id: $id) {\n    id\n    extrinisicId\n    createdAt\n    blockHash\n    blockNum\n    ... on WorkReport {\n      account\n      addedFiles\n      deletedFiles\n    }\n    ... on JoinGroup {\n      member\n      owner\n    }\n    ... on StorageOrder {\n      account\n      fileCid\n    }\n  }\n}\n")),(0,i.kt)("p",null,"This way we would reduce duplication by defining only one query to return various types in the results, rather than having three separate queries."))}m.isMDXComponent=!0}}]);