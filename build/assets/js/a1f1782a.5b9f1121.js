"use strict";(self.webpackChunksubsquid_docs=self.webpackChunksubsquid_docs||[]).push([[308],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return p}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),u=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},l=function(e){var n=u(e.components);return r.createElement(c.Provider,{value:n},e.children)},f={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),d=u(t),p=a,m=d["".concat(c,".").concat(p)]||d[p]||f[p]||o;return t?r.createElement(m,s(s({ref:n},l),{},{components:t})):r.createElement(m,s({ref:n},l))}));function p(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=d;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var u=2;u<o;u++)s[u]=t[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},75992:function(e,n,t){t.r(n),t.d(n,{assets:function(){return l},contentTitle:function(){return c},default:function(){return p},frontMatter:function(){return i},metadata:function(){return u},toc:function(){return f}});var r=t(87462),a=t(63366),o=(t(67294),t(3905)),s=["components"],i={description:"(and how to deal with them)"},c="Runtime upgrades",u={unversionedId:"reference/handler-functions/runtime-upgrades",id:"reference/handler-functions/runtime-upgrades",title:"Runtime upgrades",description:"(and how to deal with them)",source:"@site/docs/reference/handler-functions/runtime-upgrades.md",sourceDirName:"reference/handler-functions",slug:"/reference/handler-functions/runtime-upgrades",permalink:"/docs/reference/handler-functions/runtime-upgrades",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/reference/handler-functions/runtime-upgrades.md",tags:[],version:"current",frontMatter:{description:"(and how to deal with them)"},sidebar:"tutorialSidebar",previous:{title:"Handler Options Interfaces",permalink:"/docs/reference/handler-functions/handler-options-interfaces"},next:{title:"OpenReader Queries",permalink:"/docs/reference/openreader-queries/"}},l={},f=[],d={toc:f};function p(e){var n=e.components,t=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"runtime-upgrades"},"Runtime upgrades"),(0,o.kt)("p",null,"One of the most useful functionalities offered by the Subsquid SDK is the ability to automatically manage changes in the Runtime, due to upgrades for example."),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"/docs/key-concepts/typegen#blockchain-metadata"},"metadata explorer tool")," will find these changes and the ",(0,o.kt)("a",{parentName:"p",href:"/docs/key-concepts/typegen#typescript-class-wrappers"},(0,o.kt)("inlineCode",{parentName:"a"},"typegen")," tool")," will create wrapper classes that expose helper methods to distinguish and handle the different Runtime versions available for a given Event or Extrinsic."),(0,o.kt)("p",null,"Here is an example of how this all shows up as far as code goes. The ",(0,o.kt)("inlineCode",{parentName:"p"},"balances.Transfer")," event has gone through multiple Runtime versions and the generated type-safe wrapper class looks like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"export class BalancesTransferEvent {\n  constructor(private ctx: EventContext) {\n    assert(this.ctx.event.name === 'balances.Transfer')\n  }\n\n  /**\n   *  Transfer succeeded (from, to, value, fees).\n   */\n  get isV1020(): boolean {\n    return this.ctx._chain.getEventHash('balances.Transfer') === '154fca303841d334782de2e871e3572f786f81f86e2a6153c2b9e8dc6fc27422'\n  }\n\n  /**\n   *  Transfer succeeded (from, to, value, fees).\n   */\n  get asV1020(): [Uint8Array, Uint8Array, bigint, bigint] {\n    assert(this.isV1020)\n    return this.ctx._chain.decodeEvent(this.ctx.event)\n  }\n\n  /**\n   *  Transfer succeeded (from, to, value).\n   */\n  get isV1050(): boolean {\n    return this.ctx._chain.getEventHash('balances.Transfer') === '9611bd6b933331f197e8fa73bac36184681838292120987fec97092ae037d1c8'\n  }\n\n  /**\n   *  Transfer succeeded (from, to, value).\n   */\n  get asV1050(): [Uint8Array, Uint8Array, bigint] {\n    assert(this.isV1050)\n    return this.ctx._chain.decodeEvent(this.ctx.event)\n  }\n\n  /**\n   * Transfer succeeded.\n   */\n  get isV9130(): boolean {\n    return this.ctx._chain.getEventHash('balances.Transfer') === '99bc4786247456e0d4a44373efe405e598bfadfac87a7c41b0a82a91296836c1'\n  }\n\n  /**\n   * Transfer succeeded.\n   */\n  get asV9130(): {from: v9130.AccountId32, to: v9130.AccountId32, amount: bigint} {\n    assert(this.isV9130)\n    return this.ctx._chain.decodeEvent(this.ctx.event)\n  }\n\n  get isLatest(): boolean {\n    deprecateLatest()\n    return this.isV9130\n  }\n\n  get asLatest(): {from: v9130.AccountId32, to: v9130.AccountId32, amount: bigint} {\n    deprecateLatest()\n    return this.asV9130\n  }\n}\n")),(0,o.kt)("p",null,"For the ",(0,o.kt)("inlineCode",{parentName:"p"},"v9130")," version (the latest), the type definition is made explicit in a different file and imported:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"export type AccountId32 = Uint8Array\n")),(0,o.kt)("p",null,"This can then be used, for example, to construct a common interface to be passed around, and a helper function can leverage the various methods to verify the version and build such interface:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"interface TransferEvent {\n    from: Uint8Array\n    to: Uint8Array\n    amount: bigint\n}\n\n\nfunction getTransferEvent(ctx: EventHandlerContext): TransferEvent {\n    let event = new BalancesTransferEvent(ctx)\n    if (event.isV1020) {\n        let [from, to, amount] = event.asV1020\n        return {from, to, amount}\n    } else if (event.isV1050) {\n        let [from, to, amount] = event.asV1050\n        return {from, to, amount}\n    } else {\n        return event.asLatest\n    }\n}\n")))}p.isMDXComponent=!0}}]);