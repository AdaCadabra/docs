"use strict";(self.webpackChunksubsquid_docs=self.webpackChunksubsquid_docs||[]).push([[904],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return u}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),d=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=d(e.components);return r.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),f=d(t),u=o,h=f["".concat(l,".").concat(u)]||f[u]||p[u]||a;return t?r.createElement(h,i(i({ref:n},c),{},{components:t})):r.createElement(h,i({ref:n},c))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=f;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var d=2;d<a;d++)i[d]=t[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},14562:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return p}});var r=t(87462),o=t(63366),a=(t(67294),t(3905)),i=["components"],s={},l="Handler Interfaces",d={unversionedId:"reference/handler-functions/handler-interfaces",id:"reference/handler-functions/handler-interfaces",title:"Handler Interfaces",description:"We already discussed that there are three different types of Handlers. Subsquid SDK defines interface for these functions, so that the methods to attach them to a Processor can be type-safe. Here are their definitions.",source:"@site/docs/reference/handler-functions/handler-interfaces.md",sourceDirName:"reference/handler-functions",slug:"/reference/handler-functions/handler-interfaces",permalink:"/docs/reference/handler-functions/handler-interfaces",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/reference/handler-functions/handler-interfaces.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Context Interfaces",permalink:"/docs/reference/handler-functions/context-interfaces"},next:{title:"Handler Options Interfaces",permalink:"/docs/reference/handler-functions/handler-options-interfaces"}},c={},p=[{value:"<code>EventHandler</code>",id:"eventhandler",level:2},{value:"<code>ExtrinsicHandler</code>",id:"extrinsichandler",level:2},{value:"<code>BlockHandler</code>",id:"blockhandler",level:2},{value:"<code>EvmLogHandler</code>",id:"evmloghandler",level:2}],f={toc:p};function u(e){var n=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"handler-interfaces"},"Handler Interfaces"),(0,a.kt)("p",null,"We already discussed that there are three different types of Handlers. Subsquid SDK defines interface for these functions, so that the methods to attach them to a Processor can be type-safe. Here are their definitions."),(0,a.kt)("h2",{id:"eventhandler"},(0,a.kt)("inlineCode",{parentName:"h2"},"EventHandler")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface EventHandler {\n    (ctx: EventHandlerContext): Promise<void>\n}\n")),(0,a.kt)("p",null,"Simply enought, it is a function that takes in an ",(0,a.kt)("inlineCode",{parentName:"p"},"EventHandlerContext")," argument and returns a ",(0,a.kt)("inlineCode",{parentName:"p"},"Promise"),", so it is asynchronous. And this is the method to attach an ",(0,a.kt)("inlineCode",{parentName:"p"},"EventHandler")," to a Processor:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"export class SubstrateProcessor {\n\n    // ...\n    \n    addEventHandler(eventName: QualifiedName, fn: EventHandler): void\n    addEventHandler(eventName: QualifiedName, options: EventHandlerOptions, fn: EventHandler): void\n    addEventHandler(eventName: QualifiedName, fnOrOptions: EventHandlerOptions | EventHandler, fn?: EventHandler): void {\n        this.assertNotRunning()\n        let handler: EventHandler\n        let options: EventHandlerOptions = {}\n        if (typeof fnOrOptions === 'function') {\n            handler = fnOrOptions\n        } else {\n            handler = assertNotNull(fn)\n            options = fnOrOptions\n        }\n        this.hooks.event.push({\n            event: eventName,\n            handler,\n            ...options\n        })\n    }\n    \n    // ...\n}\n\n")),(0,a.kt)("h2",{id:"extrinsichandler"},(0,a.kt)("inlineCode",{parentName:"h2"},"ExtrinsicHandler")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"ExtrinsicHandler")," is extremely similar to the ",(0,a.kt)("inlineCode",{parentName:"p"},"EventHandler")," interface, just as the respective contexts are."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface ExtrinsicHandler {\n    (ctx: ExtrinsicHandlerContext): Promise<void>\n}\n")),(0,a.kt)("p",null,"This is the method to attach an ",(0,a.kt)("inlineCode",{parentName:"p"},"EventHandler")," to a Processor:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"export class SubstrateProcessor {\n\n    // ...\n    \n    addExtrinsicHandler(extrinsicName: QualifiedName, fn: ExtrinsicHandler): void\n    addExtrinsicHandler(extrinsicName: QualifiedName, options: ExtrinsicHandlerOptions, fn: ExtrinsicHandler): void\n    addExtrinsicHandler(extrinsicName: QualifiedName, fnOrOptions: ExtrinsicHandler | ExtrinsicHandlerOptions, fn?: ExtrinsicHandler): void {\n        this.assertNotRunning()\n        let handler: ExtrinsicHandler\n        let options: ExtrinsicHandlerOptions = {}\n        if (typeof fnOrOptions == 'function') {\n            handler = fnOrOptions\n        } else {\n            handler = assertNotNull(fn)\n            options = {...fnOrOptions}\n        }\n        let triggers = options.triggerEvents || ['system.ExtrinsicSuccess']\n        new Set(triggers).forEach(event => {\n            this.hooks.extrinsic.push({\n                event,\n                handler,\n                extrinsic: extrinsicName,\n                range: options.range\n            })\n        })\n    }\n    \n    // ...\n}\n\n")),(0,a.kt)("h2",{id:"blockhandler"},(0,a.kt)("inlineCode",{parentName:"h2"},"BlockHandler")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"BlockHandler")," interface is once again, a prototype of a function taking in a ",(0,a.kt)("inlineCode",{parentName:"p"},"BlockHandlerContext")," argument and returning a ",(0,a.kt)("inlineCode",{parentName:"p"},"Promise")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface BlockHandler {\n    (ctx: BlockHandlerContext): Promise<void>\n}\n")),(0,a.kt)("p",null,"What's different, this time, is that developers can attach a ",(0,a.kt)("inlineCode",{parentName:"p"},"BlockHandler")," function to be executed before or after the block is processed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"export class SubstrateProcessor {\n\n    // ...\n    \n    addPreHook(fn: BlockHandler): void\n    addPreHook(options: BlockHookOptions, fn: BlockHandler): void\n    addPreHook(fnOrOptions: BlockHandler | BlockHookOptions, fn?: BlockHandler): void {\n        this.assertNotRunning()\n        let handler: BlockHandler\n        let options: BlockHookOptions = {}\n        if (typeof fnOrOptions == 'function') {\n            handler = fnOrOptions\n        } else {\n            handler = assertNotNull(fn)\n            options = fnOrOptions\n        }\n        this.hooks.pre.push({handler, ...options})\n    }\n\n    addPostHook(fn: BlockHandler): void\n    addPostHook(options: BlockHookOptions, fn: BlockHandler): void\n    addPostHook(fnOrOptions: BlockHandler | BlockHookOptions, fn?: BlockHandler): void {\n        this.assertNotRunning()\n        let handler: BlockHandler\n        let options: BlockHookOptions = {}\n        if (typeof fnOrOptions == 'function') {\n            handler = fnOrOptions\n        } else {\n            handler = assertNotNull(fn)\n            options = fnOrOptions\n        }\n        this.hooks.post.push({handler, ...options})\n    }\n    \n    // ...\n}\n\n")),(0,a.kt)("h2",{id:"evmloghandler"},(0,a.kt)("inlineCode",{parentName:"h2"},"EvmLogHandler")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"EvmLogHandler")," is extremely similar to the ",(0,a.kt)("inlineCode",{parentName:"p"},"EventHandler")," interface, just as the respective contexts are."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface EvmLogHandler {\n    (ctx: EvmLogHandlerContext): Promise<void>\n}\n")),(0,a.kt)("p",null,"This is how to attach an ",(0,a.kt)("inlineCode",{parentName:"p"},"EvmLogHandler")," to a ",(0,a.kt)("inlineCode",{parentName:"p"},"SubstrateEvmProcessor"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"export class SubstrateEvmProcessor extends SubstrateProcessor {\n    addEvmLogHandler(contractAddress: string, fn: EvmLogHandler): void\n    addEvmLogHandler(contractAddress: string, options: EvmLogHandlerOptions, fn: EvmLogHandler): void\n    addEvmLogHandler(contractAddress: string, fnOrOptions: EvmLogHandlerOptions | EvmLogHandler, fn?: EvmLogHandler): void {\n        this.assertNotRunning()\n        let handler: EvmLogHandler\n        let options: EvmLogHandlerOptions = {}\n        if (typeof fnOrOptions === 'function') {\n            handler = fnOrOptions\n        } else {\n            handler = assertNotNull(fn)\n            options = fnOrOptions\n        }\n        this.hooks.evmLog.push({\n            contractAddress,\n            handler,\n            ...options\n        })\n    }\n}\n\n")))}u.isMDXComponent=!0}}]);