"use strict";(self.webpackChunksubsquid_docs=self.webpackChunksubsquid_docs||[]).push([[2516],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return m}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),p=s(t),m=o,f=p["".concat(l,".").concat(m)]||p[m]||u[m]||a;return t?r.createElement(f,i(i({ref:n},d),{},{components:t})):r.createElement(f,i({ref:n},d))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=p;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var s=2;s<a;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},1028:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return c},metadata:function(){return s},toc:function(){return u}});var r=t(87462),o=t(63366),a=(t(67294),t(3905)),i=["components"],c={},l="JSON fields",s={unversionedId:"reference/openreader-schema/json-fields",id:"reference/openreader-schema/json-fields",title:"JSON fields",description:"Our OpenReader implementation allows the definition of complex objects as fields. The result is that queries can retrieve these fields as JSON objects. That's why we decided to call them JSON fields.",source:"@site/docs/reference/openreader-schema/json-fields.md",sourceDirName:"reference/openreader-schema",slug:"/reference/openreader-schema/json-fields",permalink:"/docs/reference/openreader-schema/json-fields",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/reference/openreader-schema/json-fields.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Interfaces",permalink:"/docs/reference/openreader-schema/interfaces"},next:{title:"Union types",permalink:"/docs/reference/openreader-schema/union-types"}},d={},u=[],p={toc:u};function m(e){var n=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"json-fields"},"JSON fields"),(0,a.kt)("p",null,"Our OpenReader implementation allows the definition of complex objects as fields. The result is that queries can retrieve these fields as JSON objects. That's why we decided to call them ",(0,a.kt)("em",{parentName:"p"},"JSON fields"),"."),(0,a.kt)("p",null,"Let's take a real world example of a schema (look at ",(0,a.kt)("a",{parentName:"p",href:"/docs/tutorial/create-a-simple-squid"},"this Tutorial")," to know where it's used):"),(0,a.kt)("p",null,'{% code title="schema.graphql" %}'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},'type Account @entity {\n  id: ID! #Account address\n  workReports: [WorkReport] @derivedFrom(field: "account")\n  joinGroups: [JoinGroup] @derivedFrom(field: "member")\n  storageOrders: [StorageOrder] @derivedFrom (field: "account")\n}\n\ntype WorkReport @entity {\n  id: ID! #event id\n  account: Account!\n  addedFiles: [[String]]\n  deletedFiles: [[String]]\n  extrinisicId: String\n  createdAt: DateTime!\n  blockHash: String!\n  blockNum: Int!\n}\n\ntype JoinGroup @entity {\n  id: ID!\n  member: Account!\n  owner: String!\n  extrinisicId: String\n  createdAt: DateTime!\n  blockHash: String!\n  blockNum: Int!\n}\n\ntype StorageOrder @entity {\n  id: ID!\n  account: Account!\n  fileCid: String!\n  extrinisicId: String\n  createdAt: DateTime!\n  blockHash: String!\n  blockNum: Int!\n}\n\n')),(0,a.kt)("p",null,"{% endcode %}"),(0,a.kt)("p",null,"Some fields are repeated throughout the 3 main entities: ",(0,a.kt)("inlineCode",{parentName:"p"},"extrinsicId"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"createdAt"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"blockHash"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"blockNum"),". This is by no means necessary and some will say it's counterproductive, but for the purpose of this reference, if we were to collapse these fields into one JSON field, we could change the schema this way:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},'type Account @entity {\n  id: ID! #Account address\n  workReports: [WorkReport] @derivedFrom(field: "account")\n  joinGroups: [JoinGroup] @derivedFrom(field: "member")\n  storageOrders: [StorageOrder] @derivedFrom (field: "account")\n}\n\ntype WorkReport @entity {\n  id: ID! #event id\n  account: Account!\n  addedFiles: [[String]]\n  deletedFiles: [[String]]\n  blockMetadata: BlockMetadata!\n}\n\ntype JoinGroup @entity {\n  id: ID!\n  member: Account!\n  owner: String!\n  blockMetadata: BlockMetadata!\n}\n\ntype StorageOrder @entity {\n  id: ID!\n  account: Account!\n  fileCid: String!\n  blockMetadata: BlockMetadata!\n}\n\ntype BlockMetadata {\n  extrinisicId: String\n  createdAt: DateTime!\n  blockHash: String!\n  blockNum: Int!\n}\n')),(0,a.kt)("p",null,"The resulting table for ",(0,a.kt)("inlineCode",{parentName:"p"},"JoinGroup")," will look like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},'create table join_group (id text primary key, account_id as "member" text not null, "owner" text, "block_metadata" jsonb)\n')),(0,a.kt)("p",null,"And the following query:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"query {\n    joinGroups(limit: 1) {\n        id\n        owner\n        blockMetadata { blockNum, createdAt, blockHash } \n    }\n}\n")),(0,a.kt)("p",null,"Will yield the following result:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"{\n    joinGroups: [\n        {\n            id: '1', \n            owner: '1040'\n            blockMetadata : {\n                blockNum: 0,\n                createdAt: '2022-01-31T13:10:20Z',\n                blockHash: '0xb0a8d493285c2df73290dfb7e61f870f17b41801197a149ca93654499ea3dafe'\n            }\n        }\n    ]\n}\n")),(0,a.kt)("p",null,"This is a choice, a weapon at the developer's disposal. It might not always be needed, or the best option, but it's available nonetheless."))}m.isMDXComponent=!0}}]);