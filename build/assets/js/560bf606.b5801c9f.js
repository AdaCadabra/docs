"use strict";(self.webpackChunksubsquid_docs=self.webpackChunksubsquid_docs||[]).push([[687],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return f}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),d=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=d(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=d(t),f=o,m=p["".concat(s,".").concat(f)]||p[f]||u[f]||a;return t?r.createElement(m,i(i({ref:n},l),{},{components:t})):r.createElement(m,i({ref:n},l))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=p;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var d=2;d<a;d++)i[d]=t[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},84062:function(e,n,t){t.r(n),t.d(n,{assets:function(){return l},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return c},metadata:function(){return d},toc:function(){return u}});var r=t(87462),o=t(63366),a=(t(67294),t(3905)),i=["components"],c={},s="Union types",d={unversionedId:"reference/openreader-schema/union-types",id:"reference/openreader-schema/union-types",title:"Union types",description:"Union types may look similar to Interfaces and in some ways they are, but there is a very important difference between them and it is that Unions cannot specify common fields between types that are part of them.",source:"@site/docs/reference/openreader-schema/union-types.md",sourceDirName:"reference/openreader-schema",slug:"/reference/openreader-schema/union-types",permalink:"/docs/reference/openreader-schema/union-types",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/reference/openreader-schema/union-types.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"JSON fields",permalink:"/docs/reference/openreader-schema/json-fields"},next:{title:"Squid CLI Reference",permalink:"/docs/reference/squid-cli/"}},l={},u=[],p={toc:u};function f(e){var n=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"union-types"},"Union types"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://graphql.org/learn/schema/#union-types"},"Union")," types may look similar to ",(0,a.kt)("a",{parentName:"p",href:"/docs/reference/openreader-schema/interfaces"},"Interfaces")," and in some ways they are, but there is a very important difference between them and it is that Unions cannot specify common fields between types that are part of them."),(0,a.kt)("p",null,'{% hint style="warning" %}\nIt is key to highlight that Union types are only implemented for JSON fields.\n{% endhint %}'),(0,a.kt)("p",null,'We can take a look at the same schema we used for Interfaces, the only difference is that we won\'t  define an Interface and implement it with the different types. It might look like a "lazier" approach (and in some ways it is, as explained later), but we are only going to define a Union of the three types, instead, as you can see in the last line of code.'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},'type Account {\n  id: ID! #Account address\n  workReports: [WorkReport] @derivedFrom(field: "account")\n  joinGroups: [JoinGroup] @derivedFrom(field: "member")\n  storageOrders: [StorageOrder] @derivedFrom (field: "account")\n}\n\ntype WorkReport {\n  id: ID! #event id\n  account: Account!\n  addedFiles: [[String]]\n  deletedFiles: [[String]]\n  extrinisicId: String\n  createdAt: DateTime!\n  blockHash: String!\n  blockNum: Int!\n}\n\ntype JoinGroup {\n  id: ID!\n  member: Account!\n  owner: String!\n  extrinisicId: String\n  createdAt: DateTime!\n  blockHash: String!\n  blockNum: Int!\n}\n\ntype StorageOrder {\n  id: ID!\n  account: Account!\n  fileCid: String!\n  extrinisicId: String\n  createdAt: DateTime!\n  blockHash: String!\n  blockNum: Int!\n}\n\nunion Event = WorkReport | JoinGroup | StorageOrder\n\n')),(0,a.kt)("p",null,"If a query returns a Union type, inline fragments are mandatory, in order to return any fields at all, even those who could be common. That's because, as mentioned earlier, Union cannot define common fields:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"query EventById($id: ID!) {\n  event(id: $id) {\n    ... on WorkReport {\n      id\n      extrinisicId\n      createdAt\n      blockHash\n      blockNum\n      account\n      addedFiles\n      deletedFiles\n    }\n    ... on JoinGroup {\n      id\n      extrinisicId\n      createdAt\n      blockHash\n      blockNum\n      member\n      owner\n    }\n    ... on StorageOrder {\n      id\n      extrinisicId\n      createdAt\n      blockHash\n      blockNum\n      account\n      fileCid\n    }\n  }\n}\n\n")),(0,a.kt)("p",null,"As you can see, there's a lot of duplicated fields, but that's because for this specific schema, Interfaces simply prove to be more useful. Unions tend to be more indicated when there is no common fields, or a marginal overlap."))}f.isMDXComponent=!0}}]);