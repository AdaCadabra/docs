"use strict";(self.webpackChunksubsquid_docs=self.webpackChunksubsquid_docs||[]).push([[5967],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(n),d=r,h=m["".concat(l,".").concat(d)]||m[d]||u[d]||i;return n?a.createElement(h,o(o({ref:t},p),{},{components:n})):a.createElement(h,o({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},24982:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return u}});var a=n(87462),r=n(63366),i=(n(67294),n(3905)),o=["components"],s={},l="Schema updates",c={unversionedId:"recipes/running-a-squid/schema-updates",id:"recipes/running-a-squid/schema-updates",title:"Schema updates",description:"Over the course of development of an API it is often the case that new things are discovered, requests for changes happen, and so it may happen that a change to the previously defined schema is necessary.",source:"@site/docs/recipes/running-a-squid/schema-updates.md",sourceDirName:"recipes/running-a-squid",slug:"/recipes/running-a-squid/schema-updates",permalink:"/docs/recipes/running-a-squid/schema-updates",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/recipes/running-a-squid/schema-updates.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Prometheus metrics",permalink:"/docs/recipes/running-a-squid/prometheus-metrics"},next:{title:"Reference",permalink:"/docs/reference/"}},p={},u=[{value:"Schema changes",id:"schema-changes",level:2},{value:"Regenerate models",id:"regenerate-models",level:2},{value:"Create Database migration",id:"create-database-migration",level:2},{value:"Apply the migration",id:"apply-the-migration",level:2}],m={toc:u};function d(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"schema-updates"},"Schema updates"),(0,i.kt)("p",null,"Over the course of development of an API it is often the case that new things are discovered, requests for changes happen, and so it may happen that a change to the ",(0,i.kt)("a",{parentName:"p",href:"/docs/recipes/running-a-squid/define-a-squid-schema"},"previously defined schema")," is necessary."),(0,i.kt)("p",null,"The best practice in this case, and strongly advised course of action, would be to follow this checklist:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Apply the necessary changes to the schema (add/remove fields, entities, etc.)"),(0,i.kt)("li",{parentName:"ol"},"Regenerate models and build project"),(0,i.kt)("li",{parentName:"ol"},"Create new database migration"),(0,i.kt)("li",{parentName:"ol"},"Apply the database migration")),(0,i.kt)("p",null,"Let's see each one of these steps in detail"),(0,i.kt)("h2",{id:"schema-changes"},"Schema changes"),(0,i.kt)("p",null,"All changes to the schema have to be applied to the ",(0,i.kt)("inlineCode",{parentName:"p"},"schema.graphql")," file in the project's main folder."),(0,i.kt)("p",null,"Let's say for example we want to take the schema from the squid template and add a ",(0,i.kt)("inlineCode",{parentName:"p"},"timestamp")," field to the ",(0,i.kt)("inlineCode",{parentName:"p"},"HistoricalBalance")," entity. It would be a double of ",(0,i.kt)("inlineCode",{parentName:"p"},"date")," but it would make things easier in the frontend:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},'type Account @entity {\n  "Account address"\n  id: ID!\n  balance: BigInt!\n  historicalBalances: [HistoricalBalance!] @derivedFrom(field: "account")\n}\n\ntype HistoricalBalance @entity {\n  id: ID!\n  account: Account!\n  balance: BigInt!\n  date: DateTime!\n  timestamp: BigInt!\n}\n\n')),(0,i.kt)("h2",{id:"regenerate-models"},"Regenerate models"),(0,i.kt)("p",null,"Now that the schema has been changed, the TypeScript classes representing these entities have to be regenerated. To do so, simply launch this command from the project's main folder:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"sqd codegen\n")),(0,i.kt)("p",null,"And in the case of the squid template example from previous paragraph, the result should look something like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'import {Entity as Entity_, Column as Column_, PrimaryColumn as PrimaryColumn_, ManyToOne as ManyToOne_, Index as Index_} from "typeorm"\nimport * as marshal from "./marshal"\nimport {Account} from "./account.model"\n\n@Entity_()\nexport class HistoricalBalance {\n  constructor(props?: Partial<HistoricalBalance>) {\n    Object.assign(this, props)\n  }\n\n  @PrimaryColumn_()\n  id!: string\n\n  @Index_()\n  @ManyToOne_(() => Account, {nullable: false})\n  account!: Account\n\n  @Column_("numeric", {transformer: marshal.bigintTransformer, nullable: false})\n  balance!: bigint\n\n  @Column_("timestamp with time zone", {nullable: false})\n  date!: Date\n  \n  @Column_("timestamp", {nullable: false})\n  timestamp!: bigint\n}\n\n')),(0,i.kt)("p",null,"Now, it is important to build these new files, to make sure they can be used by the processor when we run it. Simply launch this command to do so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm run build\n")),(0,i.kt)("h2",{id:"create-database-migration"},"Create Database migration"),(0,i.kt)("p",null,"Once previous steps are complete, this one is easy enough, simply launch this command in a terminal window from the project's main folder:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"sqd db create-migration [migration-name]\n")),(0,i.kt)("p",null,"And a new file will be added to the ",(0,i.kt)("inlineCode",{parentName:"p"},"db/migrations")," folder."),(0,i.kt)("h2",{id:"apply-the-migration"},"Apply the migration"),(0,i.kt)("p",null,"Just as previous step, applying the migration is just a matter of running this command in a terminal window from the project's main folder:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"sqd db migrate\n")))}d.isMDXComponent=!0}}]);