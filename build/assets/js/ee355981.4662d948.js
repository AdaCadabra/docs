"use strict";(self.webpackChunksubsquid_docs=self.webpackChunksubsquid_docs||[]).push([[6369],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),f=l(n),d=a,m=f["".concat(c,".").concat(d)]||f[d]||u[d]||o;return n?r.createElement(m,s(s({ref:t},p),{},{components:n})):r.createElement(m,s({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=f;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},57951:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return u}});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),s=["components"],i={},c="Storage calls",l={unversionedId:"reference/storage-calls",id:"reference/storage-calls",title:"Storage calls",description:"It is sometimes impossible to extract the required data with only event and extrinsic data. StorageContext exposes direct queries of runtime storage items via RPC.",source:"@site/docs/reference/storage-calls.md",sourceDirName:"reference",slug:"/reference/storage-calls",permalink:"/docs/reference/storage-calls",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/reference/storage-calls.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"squid-substrate-typegen",permalink:"/docs/reference/squid-substrate-typegen"},next:{title:"Store interface",permalink:"/docs/reference/store-interface"}},p={},u=[{value:"Generate Type-safe wrappers",id:"generate-type-safe-wrappers",level:2},{value:"Process Storage items information in a Handler",id:"process-storage-items-information-in-a-handler",level:2}],f={toc:u};function d(e){var t=e.components,n=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"storage-calls"},"Storage calls"),(0,o.kt)("p",null,"It is sometimes impossible to extract the required data with only event and extrinsic data. ",(0,o.kt)("inlineCode",{parentName:"p"},"StorageContext")," exposes direct queries of ",(0,o.kt)("a",{parentName:"p",href:"https://docs.substrate.io/v3/runtime/storage/"},"runtime storage")," items via RPC."),(0,o.kt)("h2",{id:"generate-type-safe-wrappers"},"Generate Type-safe wrappers"),(0,o.kt)("p",null,"Typegen generates wrappers for fully type-safe storage calls which cover all historical runtime upgrades."),(0,o.kt)("p",null,"To enable storage calls:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"List fully qualified names of the storage items to the ",(0,o.kt)("inlineCode",{parentName:"li"},"storage")," section of ",(0,o.kt)("a",{parentName:"li",href:"/docs/key-concepts/typegen"},"typegen config")),(0,o.kt)("li",{parentName:"ul"},"Rerun typegen")),(0,o.kt)("p",null,"Here's an example of the typegen config:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "outDir": "src/types",\n  "chainVersions": "chainVersions.json",\n  "typesBundle": "./typesBundle.json",\n  "events": [\n    "balances.Transfer"\n  ],\n  "calls": [\n    "timestamp.set"\n  ],\n  "storage": [\n    "System.Account" \n  ]\n}\n')),(0,o.kt)("p",null,"To generate all available storage calls, simply set ",(0,o.kt)("inlineCode",{parentName:"p"},'"storage": true'),"."),(0,o.kt)("p",null,'{% hint style="info" %}\nNote: One can also consult subscan by navigating to the ',(0,o.kt)("a",{parentName:"p",href:"https://kusama.subscan.io/runtime"},"Runtime section")," and inspecting ",(0,o.kt)("inlineCode",{parentName:"p"},"Storage Functions")," of the pallet of interest.\n{% endhint %}"),(0,o.kt)("p",null,"Typegen will generate the file ",(0,o.kt)("inlineCode",{parentName:"p"},"types/storage.ts")," with something similar to"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"export class SystemAccountStorage {\n  constructor(private ctx: StorageContext) {}\n\n  /**\n   *  The full account information for a particular account ID.\n   */\n  get isV1() {\n    return this.ctx._chain.getStorageItemTypeHash('System', 'Account') === 'eb40f1d91f26d72e29c60e034d53a72b9b529014c7e108f422d8ad5f03f0c902'\n  }\n\n  /**\n   *  The full account information for a particular account ID.\n   */\n  async getAsV1(key: Uint8Array): Promise<v1.AccountInfoWithRefCount> {\n    assert(this.isV1)\n    return this.ctx._chain.getStorage(this.ctx.block.hash, 'System', 'Account', key)\n  }\n}\n")),(0,o.kt)("h2",{id:"process-storage-items-information-in-a-handler"},"Process Storage items information in a Handler"),(0,o.kt)("p",null,'As previously mentioned, the storage items are always retrieved at the "current" block height of ',(0,o.kt)("inlineCode",{parentName:"p"},"StorageContext"),". The usage in a handler function is straighforward:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'processor.addPreHook({ range: { from: 0, to: 0 } }, async (ctx) => {\n  const accounts = new SystemAccountStorage(ctx);\n  const aliceAddress = ss58.decode(\n    "5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY"\n  ).bytes;\n  const aliceAccount = await accounts.getAsV1(aliceAddress);\n  assert(aliceAccount.data.free > 0);\n});\n')),(0,o.kt)("p",null,'{% hint style="info" %}\nNote: It\'s important to understand that ',(0,o.kt)("inlineCode",{parentName:"p"},"addPreHook")," function accept block handler function that must accept a ",(0,o.kt)("inlineCode",{parentName:"p"},"BlockHandlerContext")," argument. It is accepted, however, to instantiate a ",(0,o.kt)("inlineCode",{parentName:"p"},"SystemAccountStorage")," with a ",(0,o.kt)("inlineCode",{parentName:"p"},"BlockHandlerContext"),", like in this example, because ",(0,o.kt)("inlineCode",{parentName:"p"},"StorageContext")," is a subset of such interface and all mandatory fields are respected.\n{% endhint %}"))}d.isMDXComponent=!0}}]);