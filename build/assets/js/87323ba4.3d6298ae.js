"use strict";(self.webpackChunksubsquid_docs=self.webpackChunksubsquid_docs||[]).push([[9781],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return h}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=u(t),h=a,f=c["".concat(l,".").concat(h)]||c[h]||p[h]||o;return t?r.createElement(f,i(i({ref:n},d),{},{components:t})):r.createElement(f,i({ref:n},d))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=c;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var u=2;u<o;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},54462:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return p}});var r=t(87462),a=t(63366),o=(t(67294),t(3905)),i=["components"],s={description:'When query results are too big, one can chose to limit them or divide them in "chunks"'},l="Paginate query results",u={unversionedId:"tutorial/graphql/paginate-query-results",id:"tutorial/graphql/paginate-query-results",title:"Paginate query results",description:'When query results are too big, one can chose to limit them or divide them in "chunks"',source:"@site/docs/tutorial/graphql/paginate-query-results.md",sourceDirName:"tutorial/graphql",slug:"/tutorial/graphql/paginate-query-results",permalink:"/docs/tutorial/graphql/paginate-query-results",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial/graphql/paginate-query-results.md",tags:[],version:"current",frontMatter:{description:'When query results are too big, one can chose to limit them or divide them in "chunks"'},sidebar:"tutorialSidebar",previous:{title:"GraphQL",permalink:"/docs/tutorial/graphql/"},next:{title:"Queries",permalink:"/docs/tutorial/graphql/queries"}},d={},p=[{value:"Arguments <code>limit</code> and <code>offset</code>",id:"arguments-limit-and-offset",level:2},{value:"<strong>Limit results</strong>",id:"limit-results",level:3},{value:"<strong>Limit results from an offset</strong>",id:"limit-results-from-an-offset",level:3},{value:"Cursor based pagination",id:"cursor-based-pagination",level:2},{value:"<strong>Operators <code>first</code>  <code>last</code></strong>",id:"operators-first--last",level:3},{value:"<strong>PageInfo object</strong>",id:"pageinfo-object",level:3},{value:"Operators <strong><code>before</code> and <code>after</code></strong>",id:"operators-before-and-after",level:3},{value:"<strong>Important Note on <code>orderBy</code></strong>",id:"important-note-on-orderby",level:3}],c={toc:p};function h(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"paginate-query-results"},"Paginate query results"),(0,o.kt)("p",null,"There are multiple ways to obtain this behavior, let's take a look at a couple of them."),(0,o.kt)("h2",{id:"arguments-limit-and-offset"},"Arguments ",(0,o.kt)("inlineCode",{parentName:"h2"},"limit")," and ",(0,o.kt)("inlineCode",{parentName:"h2"},"offset")),(0,o.kt)("p",null,"The operators limit and offset are used for pagination."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"limit")," specifies the number of entities to retain from the result set and ",(0,o.kt)("inlineCode",{parentName:"p"},"offset")," determines which slice to retain from the results."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note:")," Default value for ",(0,o.kt)("inlineCode",{parentName:"p"},"limit")," is ",(0,o.kt)("inlineCode",{parentName:"p"},"50")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"offset")," is ",(0,o.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,o.kt)("h3",{id:"limit-results"},(0,o.kt)("strong",{parentName:"h3"},"Limit results")),(0,o.kt)("p",null,"Example: Fetch the first 5 channels:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},"query {\n  channels(limit: 5) {\n    id\n    handle\n  }\n}\n")),(0,o.kt)("h3",{id:"limit-results-from-an-offset"},(0,o.kt)("strong",{parentName:"h3"},"Limit results from an offset")),(0,o.kt)("p",null,"Example: Fetch 5 channels from the list of all channels, starting with the 6th one:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},"query {\n  channels(limit: 5, offset: 5) {\n    id\n    handle\n  }\n}\n")),(0,o.kt)("h2",{id:"cursor-based-pagination"},"Cursor based pagination"),(0,o.kt)("p",null,"Cursors are used to traverse across entities of an entity set. They work by returning a pointer to a specific entity which can then be used to fetch the next batch of entities."),(0,o.kt)("p",null,"In the case of cursor based pagination, for every entity in the input schema, a query is generated with the ",(0,o.kt)("inlineCode",{parentName:"p"},"<entityName>Connection")," pattern."),(0,o.kt)("p",null,"Example: this query fetches a list of videos where ",(0,o.kt)("inlineCode",{parentName:"p"},"isExplicit")," is true and get their count. Thanks to the ",(0,o.kt)("inlineCode",{parentName:"p"},"videosConnection"),", we can limit the number of videos to return."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},"query {\n  videosConnection(where: { isExplicit_eq: true }) {\n    totalCount\n    edges {\n      node {\n        id\n        title\n      }\n    }\n  }\n}\n")),(0,o.kt)("h3",{id:"operators-first--last"},(0,o.kt)("strong",{parentName:"h3"},"Operators ",(0,o.kt)("inlineCode",{parentName:"strong"},"first"),"  ",(0,o.kt)("inlineCode",{parentName:"strong"},"last"))),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"first")," operator is used to fetch specified number of entities from the beginning and ",(0,o.kt)("inlineCode",{parentName:"p"},"last")," is vice versa."),(0,o.kt)("p",null,"Example: Fetch first 5 videos and last 5 videos:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},"query Query1 {\n  videosConnection(first: 5) {\n    edges {\n      node {\n        id\n        title\n      }\n    }\n  }\n}\n\nquery Query1 {\n  videosConnection(last: 5) {\n    edges {\n      node {\n        id\n        title\n      }\n    }\n  }\n}\n")),(0,o.kt)("h3",{id:"pageinfo-object"},(0,o.kt)("strong",{parentName:"h3"},"PageInfo object")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"PageInfo")," returns the cursor, page information and object has following fields:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},"pageInfo {\n  startCursor\n  endCursor\n  hasNextPage\n  hasPreviousPage\n}\n")),(0,o.kt)("h3",{id:"operators-before-and-after"},"Operators ",(0,o.kt)("strong",{parentName:"h3"},(0,o.kt)("inlineCode",{parentName:"strong"},"before")," and ",(0,o.kt)("inlineCode",{parentName:"strong"},"after"))),(0,o.kt)("p",null,"Example: Fetch a first 10 channels, ordered by ",(0,o.kt)("inlineCode",{parentName:"p"},"createdAt"),". Then, in a second query, fetch the next 10 channels:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},"query FirstBatchQ {\n  channelsConnection(first: 10, orderBy: createdAt_ASC) {\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n    edges {\n      node {\n        id\n        handle\n        createdAt\n      }\n    }\n  }\n}\n\nquery SecondBatchQ {\n  channelsConnection(after: <endCursor>, orderBy: createdAt_ASC) {\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n    edges {\n      node {\n        id\n        handle\n        createdAt\n      }\n    }\n  }\n}\n")),(0,o.kt)("p",null,"Example: Fetch the last 10 channels, ordered by ",(0,o.kt)("inlineCode",{parentName:"p"},"createdAt"),". Then, in a second query, fetch the previous 10 channels:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},"query FirstBatchQ {\n  channelsConnection(last: 10, orderBy: createdAt_ASC) {\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n    edges {\n      node {\n        id\n        handle\n        createdAt\n      }\n    }\n  }\n}\n\nquery SecondBatchQ {\n  channelsConnection(before: <endCursor>, orderBy: createdAt_ASC) {\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n    edges {\n      node {\n        id\n        handle\n        createdAt\n      }\n    }\n  }\n}\n")),(0,o.kt)("h3",{id:"important-note-on-orderby"},(0,o.kt)("strong",{parentName:"h3"},"Important Note on ",(0,o.kt)("inlineCode",{parentName:"strong"},"orderBy"))),(0,o.kt)("p",null,"When using ",(0,o.kt)("inlineCode",{parentName:"p"},"orderBy")," in a query, the field chosen to order by, needs to be present in the query itself:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},"query QueryName {\n  <entity>Connection(before: <endCursor>, orderBy: <fieldNameToOrderBy>_ASC) {\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n    edges {\n      node {\n        <anyOtherField>\n        <fieldNameToOrderBy>\n      }\n    }\n  }\n}\n")),(0,o.kt)("p",null,"Otherwise the returned result wouldn't be ordered correctly."))}h.isMDXComponent=!0}}]);