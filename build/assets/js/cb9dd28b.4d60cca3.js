"use strict";(self.webpackChunksubsquid_docs=self.webpackChunksubsquid_docs||[]).push([[9034],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return m}});var s=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);n&&(s=s.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,s)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,s,r=function(e,n){if(null==e)return{};var t,s,r={},a=Object.keys(e);for(s=0;s<a.length;s++)t=a[s],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)t=a[s],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=s.createContext({}),u=function(e){var n=s.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=u(e.components);return s.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return s.createElement(s.Fragment,{},n)}},l=s.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),l=u(t),m=r,h=l["".concat(c,".").concat(m)]||l[m]||p[m]||a;return t?s.createElement(h,i(i({ref:n},d),{},{components:t})):s.createElement(h,i({ref:n},d))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=l;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var u=2;u<a;u++)i[u]=t[u];return s.createElement.apply(null,i)}return s.createElement.apply(null,t)}l.displayName="MDXCreateElement"},4684:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return o},metadata:function(){return u},toc:function(){return p}});var s=t(87462),r=t(63366),a=(t(67294),t(3905)),i=["components"],o={},c="Client example",u={unversionedId:"recipes/giant-squid-api/client-example",id:"recipes/giant-squid-api/client-example",title:"Client example",description:"As mentioned before, any client wanting to aggregate multi-chain data available via the Giant Squid API, needs to perform two tasks:",source:"@site/docs/recipes/giant-squid-api/client-example.md",sourceDirName:"recipes/giant-squid-api",slug:"/recipes/giant-squid-api/client-example",permalink:"/docs/recipes/giant-squid-api/client-example",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/recipes/giant-squid-api/client-example.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Giant Squid API",permalink:"/docs/recipes/giant-squid-api/"},next:{title:"Queries",permalink:"/docs/recipes/giant-squid-api/queries"}},d={},p=[{value:"Address encoding",id:"address-encoding",level:2},{value:"Generating the query",id:"generating-the-query",level:2},{value:"Perform request and collect result",id:"perform-request-and-collect-result",level:2},{value:"Conclusion",id:"conclusion",level:2}],l={toc:p};function m(e){var n=e.components,o=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,s.Z)({},l,o,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"client-example"},"Client example"),(0,a.kt)("p",null,"As mentioned before, any client wanting to aggregate multi-chain data available via the Giant Squid API, needs to perform two tasks:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Encode the address with the codec appropriate to the chain in question (if the objective is to monitor an account's activity across multiple chains)"),(0,a.kt)("li",{parentName:"ul"},"Generate a query including all the chains interested by the exploration"),(0,a.kt)("li",{parentName:"ul"},"Perform the request and process the result by aggregating the resulting data")),(0,a.kt)("p",null,"The simple client example we are going to build is a Node.js simple project, with only two dependencies. Let's start by initializing the project and installing necessary dependencies, by opening a console window, heading to the directory where we want to create our project and launching these two commands:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"npm init\nnpm i @subsquid/ss58 graphql-request\n")),(0,a.kt)("p",null,'The first dependency is one of Subsquid\'s library, specifically used for address encoding (the subject of next section) and the second one is a simple library to perform GraphQL requests, it represent the "actual" client and can be substituted, depending on personal preferences.'),(0,a.kt)("h2",{id:"address-encoding"},"Address encoding"),(0,a.kt)("p",null,"In this guide we are going to take a look at an example that does exactly this. For the purpose of this guide, we are using this address as the subject of our research:"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"YFbLqqwvegzXpE65mGAPSxe2VQaL2u8ApuDT7KMWTSND8Hk")),(0,a.kt)("p",null,'This is the address of a nominator, and it is in the format known as "Any network". As such, it is possible to search it in ',(0,a.kt)("a",{parentName:"p",href:"https://polkadot.subscan.io/account/YFbLqqwvegzXpE65mGAPSxe2VQaL2u8ApuDT7KMWTSND8Hk"},"Polkadot's Subscan"),", for example, and it will be evident that the address reported in the result is different."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"pos.dog account on Polkadot&#39;s Subscan",src:t(14596).Z,width:"1785",height:"920"})),(0,a.kt)("p",null,"This is because it gets encoded with Polkadot's own codec. If we were to search it on ",(0,a.kt)("a",{parentName:"p",href:"https://kusama.subscan.io/account/YFbLqqwvegzXpE65mGAPSxe2VQaL2u8ApuDT7KMWTSND8Hk"},"Kusama's Subscan")," we'd still be able to find it, but the reported address is different:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"pos.dog account on Kusama&#39;s Subscan",src:t(23108).Z,width:"1789",height:"907"})),(0,a.kt)("p",null,"As mentioned at the start, Subsquid's SDK provides a utility package for this, called ",(0,a.kt)("inlineCode",{parentName:"p"},"ss58"),", which is what we are going to use in our client example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import * as ss58 from "@subsquid/ss58";\n\nconst ANY_ADRESS = "YFbLqqwvegzXpE65mGAPSxe2VQaL2u8ApuDT7KMWTSND8Hk";\n\nconst chainNames = [\n  "kusama",\n  "polkadot",\n  "astar"\n];\n\n// Creating multichain Account entity\ninterface Account {\n  addressBase: Uint8Array;\n  adresses: Map<string, string>;\n}\n\nconst account: Account = {\n  addressBase: ss58.decode(ANY_ADRESS).bytes,\n  adresses: new Map(),\n};\n\n// Creating codec for every chain\nvar chainCodecs: Map<string, ss58.Codec> = new Map();\n\nchainNames.forEach((chainName) => {\n  try {\n    chainCodecs.set(chainName, ss58.codec(chainName));\n  } catch {\n    console.error(\n      `Can\'t find codec for name ${chainName}. Please specify its prefix manually`\n    );\n    process.exit(1);\n  }\n});\n\n// Getting account\'s addresses for every chain\nchainCodecs.forEach((codec, chain) => {\n  account.adresses.set(chain, codec.encode(account.addressBase));\n});\n')),(0,a.kt)("p",null,"The above code accomplishes these tasks:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Compiles a list of blockchains we are interested in"),(0,a.kt)("li",{parentName:"ul"},"Creates an ",(0,a.kt)("inlineCode",{parentName:"li"},"Account")," interface and instance, containing the base address (the one discussed above) and an empty map"),(0,a.kt)("li",{parentName:"ul"},"Then proceeds in creating a map, named ",(0,a.kt)("inlineCode",{parentName:"li"},"chainCodecs")," that links a chain's name to its related encoding function, using the appropriate codec version."),(0,a.kt)("li",{parentName:"ul"},"Finally, using ",(0,a.kt)("inlineCode",{parentName:"li"},"chainCodecs"),", it fills the ",(0,a.kt)("inlineCode",{parentName:"li"},"Account")," instance's map with encoded addresses")),(0,a.kt)("p",null,'{% hint style="warning" %}\nThe only exception to everything explained above are Moonbeam and Moonriver networks, which have Ethereum-formatted Accound addresses, and as such, cannot be directly converted from the "Any network" format.\n{% endhint %}'),(0,a.kt)("h2",{id:"generating-the-query"},"Generating the query"),(0,a.kt)("p",null,"I has been mentioned in the Query page of this guide that when performing queries against the Giant Squid API, every chain is a separate query on its own."),(0,a.kt)("p",null,"For this reason, it may be convenient to programmatically build different sub-queries from a template and merging them into a single query object."),(0,a.kt)("p",null,"This is shown in the code snippet below, leveraging the code shown in the previous section"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// Query sample for a single chain\n// Latest 10 transfers from every chain\nfunction chainTransfersQuery(chainName: string, address: string) {\n  return gql`\n  ${chainName} {\n    accountById(id: "${address}") {\n      id\n      transfers(limit: 10, orderBy: transfer_blockNumber_DESC) {\n        direction\n        transfer {\n          fromId\n          toId\n          success\n          amount\n          timestamp\n        }\n      }\n    }\n  }\n  `;\n}\n\n// Use sample query to every chain\nlet query = "";\naccount.adresses.forEach((address, chain) => {\n  query += chainTransfersQuery(chain, address);\n});\n\n// Wrap final query to gql query syntax\nconst finalQuery = gql`query AccountTransfersQuery {${query}}`;\n')),(0,a.kt)("h2",{id:"perform-request-and-collect-result"},"Perform request and collect result"),(0,a.kt)("p",null,"The only thing left to do, for a client, although it might seem trivial is to perform the quest and collect the result."),(0,a.kt)("p",null,"Here is a code snippet that takes in the query generated in the previous section, performs the query request and writes the result in a json file."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import { request, gql, GraphQLClient } from "graphql-request";\nimport * as fs from "fs";\n\n// Specify stitched squid endpoint\nconst GQL_ENDPOINT = "https://app.devsquid.net/squids/super-api/v2/graphql";\n\nconst graphQLClient = new GraphQLClient(GQL_ENDPOINT);\ngraphQLClient\n  .request(finalQuery)\n  .then((res) =>\n    fs.writeFileSync("result.json", JSON.stringify(res, null, 2))\n  );\n')),(0,a.kt)("details",null,(0,a.kt)("summary",null,"And here is the resulting JSON:"),(0,a.kt)("p",null,'{% code title="result.json" %}'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'{\n  "kusama": {\n    "accountById": {\n      "id": "EtcZsDjmn4p4e1hNAd6FkAN62yhAV1Zc1Epc4PT7teuNL2s",\n      "transfers": [\n        {\n          "direction": "FROM",\n          "transfer": {\n            "fromId": "EtcZsDjmn4p4e1hNAd6FkAN62yhAV1Zc1Epc4PT7teuNL2s",\n            "toId": "DpExh9RyJZdye1LNw2JXKNRefDuC5hVhq8XGnYD7wwJJBQQ",\n            "success": true,\n            "amount": "20000000000000000",\n            "timestamp": "2020-08-22T16:04:48.001000Z"\n          }\n        },\n        {\n          "direction": "FROM",\n          "transfer": {\n            "fromId": "EtcZsDjmn4p4e1hNAd6FkAN62yhAV1Zc1Epc4PT7teuNL2s",\n            "toId": "DpExh9RyJZdye1LNw2JXKNRefDuC5hVhq8XGnYD7wwJJBQQ",\n            "success": true,\n            "amount": "20000000000000000",\n            "timestamp": "2020-08-20T15:44:12.000000Z"\n          }\n        },\n        {\n          "direction": "FROM",\n          "transfer": {\n            "fromId": "EtcZsDjmn4p4e1hNAd6FkAN62yhAV1Zc1Epc4PT7teuNL2s",\n            "toId": "DpExh9RyJZdye1LNw2JXKNRefDuC5hVhq8XGnYD7wwJJBQQ",\n            "success": true,\n            "amount": "20000000000000000",\n            "timestamp": "2020-08-18T16:09:12.000000Z"\n          }\n        },\n        {\n          "direction": "TO",\n          "transfer": {\n            "fromId": "EtcZsDjmn4p4e1hNAd6FkAN62yhAV1Zc1Epc4PT7teuNL2s",\n            "toId": "EtcZsDjmn4p4e1hNAd6FkAN62yhAV1Zc1Epc4PT7teuNL2s",\n            "success": true,\n            "amount": "20000000000000000",\n            "timestamp": "2020-08-18T16:04:54.000000Z"\n          }\n        },\n        {\n          "direction": "FROM",\n          "transfer": {\n            "fromId": "EtcZsDjmn4p4e1hNAd6FkAN62yhAV1Zc1Epc4PT7teuNL2s",\n            "toId": "EtcZsDjmn4p4e1hNAd6FkAN62yhAV1Zc1Epc4PT7teuNL2s",\n            "success": true,\n            "amount": "20000000000000000",\n            "timestamp": "2020-08-18T16:04:54.000000Z"\n          }\n        },\n        {\n          "direction": "FROM",\n          "transfer": {\n            "fromId": "EtcZsDjmn4p4e1hNAd6FkAN62yhAV1Zc1Epc4PT7teuNL2s",\n            "toId": "EtcZsDjmn4p4e1hNAd6FkAN62yhAV1Zc1Epc4PT7teuNL2s",\n            "success": true,\n            "amount": "20000000000000000",\n            "timestamp": "2020-08-18T15:32:24.000000Z"\n          }\n        },\n        {\n          "direction": "TO",\n          "transfer": {\n            "fromId": "EtcZsDjmn4p4e1hNAd6FkAN62yhAV1Zc1Epc4PT7teuNL2s",\n            "toId": "EtcZsDjmn4p4e1hNAd6FkAN62yhAV1Zc1Epc4PT7teuNL2s",\n            "success": true,\n            "amount": "20000000000000000",\n            "timestamp": "2020-08-18T15:32:24.000000Z"\n          }\n        },\n        {\n          "direction": "FROM",\n          "transfer": {\n            "fromId": "EtcZsDjmn4p4e1hNAd6FkAN62yhAV1Zc1Epc4PT7teuNL2s",\n            "toId": "DpExh9RyJZdye1LNw2JXKNRefDuC5hVhq8XGnYD7wwJJBQQ",\n            "success": true,\n            "amount": "10000000000000000",\n            "timestamp": "2020-08-18T13:26:42.000000Z"\n          }\n        },\n        {\n          "direction": "FROM",\n          "transfer": {\n            "fromId": "EtcZsDjmn4p4e1hNAd6FkAN62yhAV1Zc1Epc4PT7teuNL2s",\n            "toId": "DpExh9RyJZdye1LNw2JXKNRefDuC5hVhq8XGnYD7wwJJBQQ",\n            "success": true,\n            "amount": "10000000000000000",\n            "timestamp": "2020-08-17T18:18:00.000000Z"\n          }\n        },\n        {\n          "direction": "FROM",\n          "transfer": {\n            "fromId": "EtcZsDjmn4p4e1hNAd6FkAN62yhAV1Zc1Epc4PT7teuNL2s",\n            "toId": "DpExh9RyJZdye1LNw2JXKNRefDuC5hVhq8XGnYD7wwJJBQQ",\n            "success": true,\n            "amount": "7677000000000000",\n            "timestamp": "2020-08-17T17:36:30.000000Z"\n          }\n        }\n      ]\n    }\n  },\n  "polkadot": {\n    "accountById": {\n      "id": "13KJ3t8w1CKMkXCmZ6s3VwdWo4h747kXE88ZNh6rCBTvojmM",\n      "transfers": [\n        {\n          "direction": "FROM",\n          "transfer": {\n            "fromId": "13KJ3t8w1CKMkXCmZ6s3VwdWo4h747kXE88ZNh6rCBTvojmM",\n            "toId": "14rCAVdFmbG8QN6MWyeAPHtyM9MbjqxHGDJGBXbcZFkmmYvT",\n            "success": true,\n            "amount": "62300000000000",\n            "timestamp": "2021-11-13T02:11:12.002000Z"\n          }\n        },\n        {\n          "direction": "FROM",\n          "transfer": {\n            "fromId": "13KJ3t8w1CKMkXCmZ6s3VwdWo4h747kXE88ZNh6rCBTvojmM",\n            "toId": "14rCAVdFmbG8QN6MWyeAPHtyM9MbjqxHGDJGBXbcZFkmmYvT",\n            "success": true,\n            "amount": "563750000000000",\n            "timestamp": "2021-11-10T17:26:48.001000Z"\n          }\n        },\n        {\n          "direction": "FROM",\n          "transfer": {\n            "fromId": "13KJ3t8w1CKMkXCmZ6s3VwdWo4h747kXE88ZNh6rCBTvojmM",\n            "toId": "14rCAVdFmbG8QN6MWyeAPHtyM9MbjqxHGDJGBXbcZFkmmYvT",\n            "success": true,\n            "amount": "9500000000000000",\n            "timestamp": "2021-11-10T16:22:36.002000Z"\n          }\n        },\n        {\n          "direction": "FROM",\n          "transfer": {\n            "fromId": "13KJ3t8w1CKMkXCmZ6s3VwdWo4h747kXE88ZNh6rCBTvojmM",\n            "toId": "14rCAVdFmbG8QN6MWyeAPHtyM9MbjqxHGDJGBXbcZFkmmYvT",\n            "success": true,\n            "amount": "128850000000000",\n            "timestamp": "2021-11-09T07:24:00.003000Z"\n          }\n        },\n        {\n          "direction": "FROM",\n          "transfer": {\n            "fromId": "13KJ3t8w1CKMkXCmZ6s3VwdWo4h747kXE88ZNh6rCBTvojmM",\n            "toId": "14rCAVdFmbG8QN6MWyeAPHtyM9MbjqxHGDJGBXbcZFkmmYvT",\n            "success": true,\n            "amount": "2077200000000000",\n            "timestamp": "2021-11-05T09:24:36.016000Z"\n          }\n        },\n        {\n          "direction": "FROM",\n          "transfer": {\n            "fromId": "13KJ3t8w1CKMkXCmZ6s3VwdWo4h747kXE88ZNh6rCBTvojmM",\n            "toId": "14rCAVdFmbG8QN6MWyeAPHtyM9MbjqxHGDJGBXbcZFkmmYvT",\n            "success": true,\n            "amount": "20000000000",\n            "timestamp": "2021-11-05T09:24:00.002000Z"\n          }\n        },\n        {\n          "direction": "FROM",\n          "transfer": {\n            "fromId": "13KJ3t8w1CKMkXCmZ6s3VwdWo4h747kXE88ZNh6rCBTvojmM",\n            "toId": "16AF7zYfPCPN6J7XsQGqRVoDqrnfdLz2roXWCSxGgQMEVgLq",\n            "success": true,\n            "amount": "209880000000000",\n            "timestamp": "2021-06-27T16:24:00.001000Z"\n          }\n        },\n        {\n          "direction": "FROM",\n          "transfer": {\n            "fromId": "13KJ3t8w1CKMkXCmZ6s3VwdWo4h747kXE88ZNh6rCBTvojmM",\n            "toId": "16AF7zYfPCPN6J7XsQGqRVoDqrnfdLz2roXWCSxGgQMEVgLq",\n            "success": true,\n            "amount": "117000000000000",\n            "timestamp": "2021-06-22T16:32:06.002000Z"\n          }\n        },\n        {\n          "direction": "FROM",\n          "transfer": {\n            "fromId": "13KJ3t8w1CKMkXCmZ6s3VwdWo4h747kXE88ZNh6rCBTvojmM",\n            "toId": "16AF7zYfPCPN6J7XsQGqRVoDqrnfdLz2roXWCSxGgQMEVgLq",\n            "success": true,\n            "amount": "557000000000000",\n            "timestamp": "2021-06-19T15:48:30.000000Z"\n          }\n        },\n        {\n          "direction": "FROM",\n          "transfer": {\n            "fromId": "13KJ3t8w1CKMkXCmZ6s3VwdWo4h747kXE88ZNh6rCBTvojmM",\n            "toId": "16AF7zYfPCPN6J7XsQGqRVoDqrnfdLz2roXWCSxGgQMEVgLq",\n            "success": true,\n            "amount": "61720000000000",\n            "timestamp": "2021-06-19T15:47:42.000000Z"\n          }\n        }\n      ]\n    }\n  },\n  "astar": {\n    "accountById": {\n      "id": "YFbLqqwvegzXpE65mGAPSxe2VQaL2u8ApuDT7KMWTSND8Hk",\n      "transfers": [\n        {\n          "direction": "FROM",\n          "transfer": {\n            "fromId": "YFbLqqwvegzXpE65mGAPSxe2VQaL2u8ApuDT7KMWTSND8Hk",\n            "toId": "ZnVTTLGh3dmBf7g3e3HGoE6aa551m6tCv4vFwp7sXjDAvgs",\n            "success": true,\n            "amount": "2216000000000000000000000",\n            "timestamp": "2022-01-21T15:26:18.510000Z"\n          }\n        },\n        {\n          "direction": "FROM",\n          "transfer": {\n            "fromId": "YFbLqqwvegzXpE65mGAPSxe2VQaL2u8ApuDT7KMWTSND8Hk",\n            "toId": "ZnVTTLGh3dmBf7g3e3HGoE6aa551m6tCv4vFwp7sXjDAvgs",\n            "success": true,\n            "amount": "5000000000000000000000",\n            "timestamp": "2022-01-17T12:21:30.810000Z"\n          }\n        },\n        {\n          "direction": "FROM",\n          "transfer": {\n            "fromId": "YFbLqqwvegzXpE65mGAPSxe2VQaL2u8ApuDT7KMWTSND8Hk",\n            "toId": "YFbLqqwvegzXpE65mGAPSxe2VQaL2u8ApuDT7KMWTSND8Hk",\n            "success": true,\n            "amount": "5000000000000000000000",\n            "timestamp": "2022-01-17T12:20:30.262000Z"\n          }\n        },\n        {\n          "direction": "TO",\n          "transfer": {\n            "fromId": "YFbLqqwvegzXpE65mGAPSxe2VQaL2u8ApuDT7KMWTSND8Hk",\n            "toId": "YFbLqqwvegzXpE65mGAPSxe2VQaL2u8ApuDT7KMWTSND8Hk",\n            "success": true,\n            "amount": "5000000000000000000000",\n            "timestamp": "2022-01-17T12:20:30.262000Z"\n          }\n        },\n        {\n          "direction": "FROM",\n          "transfer": {\n            "fromId": "YFbLqqwvegzXpE65mGAPSxe2VQaL2u8ApuDT7KMWTSND8Hk",\n            "toId": "ZnVTTLGh3dmBf7g3e3HGoE6aa551m6tCv4vFwp7sXjDAvgs",\n            "success": true,\n            "amount": "25570000000000000000000000",\n            "timestamp": "2022-01-17T12:18:42.372000Z"\n          }\n        }\n      ]\n    }\n  }\n}\n')),(0,a.kt)("p",null,"{% endcode %}")),(0,a.kt)("h2",{id:"conclusion"},"Conclusion"),(0,a.kt)("p",null,"This client example is purely for demonstrative purposes, most likely a frontend application implementation would look slightly differently, but the base principles shown in this guide like address encoding and query generation should still apply."),(0,a.kt)("details",null,(0,a.kt)("summary",null,"You can look at the complete code example here:"),(0,a.kt)("p",null,'{% code title="index.ts" %}'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import * as ss58 from "@subsquid/ss58";\nimport { request, gql, GraphQLClient } from "graphql-request";\nimport * as fs from "fs";\n\n// Specify stitched squid endpoint\nconst GQL_ENDPOINT = "https://app.devsquid.net/squids/super-api/v2/graphql";\n// Specify  account\'s address in ANY chain or just substrate address (it is shown in polkadot.js extension)\nconst ANY_ADRESS = "YFbLqqwvegzXpE65mGAPSxe2VQaL2u8ApuDT7KMWTSND8Hk";\n\nconst chainNames = [\n  "kusama",\n  "polkadot",\n  "astar"\n];\n\n// Creating multichain Account entity\ninterface Account {\n  addressBase: Uint8Array;\n  adresses: Map<string, string>;\n}\n\nconst account: Account = {\n  addressBase: ss58.decode(ANY_ADRESS).bytes,\n  adresses: new Map(),\n};\n\n// Creating codec for every chain\nvar chainCodecs: Map<string, ss58.Codec> = new Map();\n\nchainNames.forEach((chainName) => {\n  try {\n    chainCodecs.set(chainName, ss58.codec(chainName));\n  } catch {\n    console.error(\n      `Can\'t find codec for name ${chainName}. Please specify its prefix manually`\n    );\n    process.exit(1);\n  }\n});\n\n// Suppose we can\'t find astar and we specify its prefix manually\n// chainCodecs.set("astar", ss58.codec(5));\n\n// Getting account\'s addresses for every chain\nchainCodecs.forEach((codec, chain) => {\n  account.adresses.set(chain, codec.encode(account.addressBase));\n});\n\n// Query sample for a single chain\n// Latest 10 transfers from every chain\nfunction chainTransfersQuery(chainName: string, address: string) {\n  return gql`\n  ${chainName} {\n    accountById(id: "${address}") {\n      id\n      transfers(limit: 10, orderBy: transfer_blockNumber_DESC) {\n        direction\n        transfer {\n          fromId\n          toId\n          success\n          amount\n          timestamp\n        }\n      }\n    }\n  }\n  `;\n}\n\n// Use sample query to every chain\nlet query = "";\naccount.adresses.forEach((address, chain) => {\n  query += chainTransfersQuery(chain, address);\n});\n\n// Wrap final query to gql query syntax\nconst finalQuery = gql`query AccountTransfersQuery {${query}}`;\n\n// Connect to the endpoint, make ONLY one request and see the result\nconst graphQLClient = new GraphQLClient(GQL_ENDPOINT);\ngraphQLClient\n  .request(finalQuery)\n  .then((res) =>\n    fs.writeFileSync("result.json", JSON.stringify(res, null, 2))\n  );\n')),(0,a.kt)("p",null,"{% endcode %}")))}m.isMDXComponent=!0},23108:function(e,n,t){n.Z=t.p+"assets/images/image-1-38c8e0d7be2c74886944c9abb5c91e45.png"},14596:function(e,n,t){n.Z=t.p+"assets/images/image-bc01c8e209a1ead6cd82b0c72d3b6512.png"}}]);