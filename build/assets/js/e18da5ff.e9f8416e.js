"use strict";(self.webpackChunksubsquid_docs=self.webpackChunksubsquid_docs||[]).push([[5206],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,s=e.originalType,c=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),d=l(t),m=o,g=d["".concat(c,".").concat(m)]||d[m]||p[m]||s;return t?r.createElement(g,i(i({ref:n},u),{},{components:t})):r.createElement(g,i({ref:n},u))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var s=t.length,i=new Array(s);i[0]=d;var a={};for(var c in n)hasOwnProperty.call(n,c)&&(a[c]=n[c]);a.originalType=e,a.mdxType="string"==typeof e?e:o,i[1]=a;for(var l=2;l<s;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},10264:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return a},metadata:function(){return l},toc:function(){return p}});var r=t(87462),o=t(63366),s=(t(67294),t(3905)),i=["components"],a={},c="Monitoring and sync status",l={unversionedId:"recipes/deploying-a-squid/monitoring-and-sync-status",id:"recipes/deploying-a-squid/monitoring-and-sync-status",title:"Monitoring and sync status",description:"The Subsquid SDK offers a useful command line tool to monitor the Cloud-deployed Squid. the tail subcommand will output the logs of a Squid, when providing its name and version.",source:"@site/docs/recipes/deploying-a-squid/monitoring-and-sync-status.md",sourceDirName:"recipes/deploying-a-squid",slug:"/recipes/deploying-a-squid/monitoring-and-sync-status",permalink:"/docs/recipes/deploying-a-squid/monitoring-and-sync-status",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/recipes/deploying-a-squid/monitoring-and-sync-status.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Maintaining multiple versions",permalink:"/docs/recipes/deploying-a-squid/maintaining-multiple-versions"},next:{title:"Obtaining a deployment key",permalink:"/docs/recipes/deploying-a-squid/obtaining-a-deployment-key"}},u={},p=[],d={toc:p};function m(e){var n=e.components,t=(0,o.Z)(e,i);return(0,s.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"monitoring-and-sync-status"},"Monitoring and sync status"),(0,s.kt)("p",null,"The Subsquid SDK offers a useful command line tool to monitor the Cloud-deployed Squid. the ",(0,s.kt)("inlineCode",{parentName:"p"},"tail")," subcommand will output the logs of a Squid, when providing its name and version."),(0,s.kt)("p",null,"The optional arguments ",(0,s.kt)("inlineCode",{parentName:"p"},"-f")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"-l <n>")," will, respectively, make sure that the stream of logs is continuously updated and that the last ",(0,s.kt)("inlineCode",{parentName:"p"},"n")," lines are shown, before outputting any new ones."),(0,s.kt)("p",null,"Let's take the example of our ",(0,s.kt)("inlineCode",{parentName:"p"},"SquidSaas")," squid and fetch logs for its version labeled ",(0,s.kt)("inlineCode",{parentName:"p"},"1"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"\u21d2   sqd squid tail SquidSaas@1 -f -l 10\nGetting logs...\nLast block: 6935348, mapping: 26 blocks/sec, ingest: 660 blocks/sec, eta: 4h 36m, progress: 60%\nLast block: 6941366, mapping: 30 blocks/sec, ingest: 546 blocks/sec, eta: 4h 35m, progress: 60%\nLast block: 6944499, mapping: 29 blocks/sec, ingest: 511 blocks/sec, eta: 5h 23m, progress: 60%\nLast block: 6949077, mapping: 29 blocks/sec, ingest: 491 blocks/sec, eta: 5h 1m, progress: 60%\nLast block: 6954871, mapping: 32 blocks/sec, ingest: 378 blocks/sec, eta: 4h 23m, progress: 60%\nLast block: 6960064, mapping: 28 blocks/sec, ingest: 400 blocks/sec, eta: 4h 40m, progress: 60%\nLast block: 6968949, mapping: 32 blocks/sec, ingest: 339 blocks/sec, eta: 3h 29m, progress: 60%\nLast block: 6976994, mapping: 28 blocks/sec, ingest: 447 blocks/sec, eta: 3h 4m, progress: 60%\n")))}m.isMDXComponent=!0}}]);