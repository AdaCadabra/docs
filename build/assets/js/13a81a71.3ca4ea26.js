"use strict";(self.webpackChunksubsquid_docs=self.webpackChunksubsquid_docs||[]).push([[6675],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return f}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=u(t),f=a,m=d["".concat(l,".").concat(f)]||d[f]||c[f]||i;return t?r.createElement(m,o(o({ref:n},p),{},{components:t})):r.createElement(m,o({ref:n},p))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var u=2;u<i;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},61400:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return l},default:function(){return f},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return c}});var r=t(87462),a=t(63366),i=(t(67294),t(3905)),o=["components"],s={description:"Powerful queries leveraging JSON objects as fields in a schema"},l="JSON queries",u={unversionedId:"reference/openreader-queries/json-queries",id:"reference/openreader-queries/json-queries",title:"JSON queries",description:"Powerful queries leveraging JSON objects as fields in a schema",source:"@site/docs/reference/openreader-queries/json-queries.md",sourceDirName:"reference/openreader-queries",slug:"/reference/openreader-queries/json-queries",permalink:"/docs/reference/openreader-queries/json-queries",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/reference/openreader-queries/json-queries.md",tags:[],version:"current",frontMatter:{description:"Powerful queries leveraging JSON objects as fields in a schema"},sidebar:"tutorialSidebar",previous:{title:"Cross-relation field queries",permalink:"/docs/reference/openreader-queries/cross-relation-field-queries"},next:{title:"Nested field queries",permalink:"/docs/reference/openreader-queries/nested-field-queries"}},p={},c=[],d={toc:c};function f(e){var n=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"json-queries"},"JSON queries"),(0,i.kt)("p",null,"The possibility of defining JSON objects as fields of a type in a GraphQL schema has been explained in the ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/openreader-schema/json-fields"},"dedicated Reference page"),"."),(0,i.kt)("p",null,"This guide is focusing on how to query such objects and how to fully leverage their potential. Let's take the example of this (non-crypto related, for once\ud83d\ude01) schema:"),(0,i.kt)("p",null,'{% code title="schema.graphql" %}'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"type Entity @entity {\n    id: ID!\n    a: A\n}\n\ntype A {\n    a: String\n    b: B\n}\n\ntype B {\n    a: A\n    b: String\n    e: Entity\n}\n")),(0,i.kt)("p",null,"{% endcode %}"),(0,i.kt)("p",null,'It\'s composed of one entity and two JSON objects definitions, used in a "nested" way.'),(0,i.kt)("p",null,"Let's now look at a simple query:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"query {\n    entities(orderBy: id_ASC) { \n        id \n        a { a } \n    }\n}\n")),(0,i.kt)("p",null,"This will return a result such as this one (imagining this data exists in the database):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"{\n    entities: [\n        {id: '1', a: {a: 'a'}},\n        {id: '2', a: {a: 'A'}},\n        {id: '3', a: {a: null}},\n        {id: '4', a: null}\n    ]\n}\n")),(0,i.kt)("p",null,"Simply enough, the first two objects have an object of type ",(0,i.kt)("inlineCode",{parentName:"p"},"A")," with some content inside, the third one has an object, but its ",(0,i.kt)("inlineCode",{parentName:"p"},"a")," field is ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," and the fourth one simply does not have an ",(0,i.kt)("inlineCode",{parentName:"p"},"A")," object at all."),(0,i.kt)("p",null,"Now, let's look at a more complicated query, one that tries to ",(0,i.kt)("em",{parentName:"p"},"take apart")," the circular relationship that exists between ",(0,i.kt)("inlineCode",{parentName:"p"},"Entity"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"A"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"B")," (if you look closely, ",(0,i.kt)("inlineCode",{parentName:"p"},"Entity"),"  references ",(0,i.kt)("inlineCode",{parentName:"p"},"A"),", which references ",(0,i.kt)("inlineCode",{parentName:"p"},"B"),", which, in turn, has an ",(0,i.kt)("inlineCode",{parentName:"p"},"Entity")," field...)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"query {\n    entities(orderBy: id_ASC) { \n        id \n        a { \n            b {\n                e {\n                    id\n                    a {\n                        b {\n                            b\n                            e { id }\n                        }\n                    }\n                }\n            }\n        } \n    }\n}\n")),(0,i.kt)("p",null,"Here's the result:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"{\n    entities: [\n        {\n            id: '1', \n            a: {\n                b: {\n                    e: {\n                        id: '1', \n                        a: {\n                            b: {\n                                b: 'b', \n                                e: {\n                                    id: '1'\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        {\n            id: '2', \n            a: {\n                b: {\n                    e: {\n                        id: '1', \n                        a: {\n                            b: {\n                                b: 'b', \n                                e: {\n                                    id: '1'\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        {\n            id: '3', \n            a: {\n                b: null\n            }\n        },\n        {\n            id: '4', \n            a: null\n        }\n    ]\n}\n")),(0,i.kt)("p",null,"It is definitely a ",(0,i.kt)("em",{parentName:"p"},"perverse")," way to perform a query, but it only serves the purpose of showing how JSON fields can be used in queries and the capabilities of OpenReader in representing them."))}f.isMDXComponent=!0}}]);