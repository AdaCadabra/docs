"use strict";(self.webpackChunksubsquid_docs=self.webpackChunksubsquid_docs||[]).push([[53],{1109:function(e){e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"category","label":"Support","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Bug reporting guidelines","href":"/docs/faq/bug-reporting-guidelines","docId":"faq/bug-reporting-guidelines"},{"type":"link","label":"How do I decode the event data? And how to deal with runtime upgrades?","href":"/docs/faq/how-do-i-decode-the-event-data-and-how-to-deal-with-runtime-upgrades","docId":"faq/how-do-i-decode-the-event-data-and-how-to-deal-with-runtime-upgrades"},{"type":"link","label":"How do I deploy my API to the Subsquid Hosted service?","href":"/docs/faq/how-do-i-deploy-my-api-to-the-subsquid-hosted-service","docId":"faq/how-do-i-deploy-my-api-to-the-subsquid-hosted-service"},{"type":"link","label":"How do I know which events and extrinsics I need for the handlers?","href":"/docs/faq/how-do-i-know-which-events-and-extrinsics-i-need-for-the-handlers","docId":"faq/how-do-i-know-which-events-and-extrinsics-i-need-for-the-handlers"},{"type":"link","label":"How do I run and test the GraphQL API?","href":"/docs/faq/how-do-i-run-and-test-the-graphql-api","docId":"faq/how-do-i-run-and-test-the-graphql-api"},{"type":"link","label":"How do I start the processor?","href":"/docs/faq/how-do-i-start-the-processor","docId":"faq/how-do-i-start-the-processor"},{"type":"link","label":"How do I update my schema?","href":"/docs/faq/how-do-i-update-my-schema","docId":"faq/how-do-i-update-my-schema"},{"type":"link","label":"How do I write the schema?","href":"/docs/faq/how-do-i-write-the-schema","docId":"faq/how-do-i-write-the-schema"},{"type":"link","label":"How to run a processor against a different chain?","href":"/docs/faq/how-to-run-a-processor-against-a-different-chain","docId":"faq/how-to-run-a-processor-against-a-different-chain"},{"type":"link","label":"Where do I get a type bundle for my chain?","href":"/docs/faq/where-do-i-get-a-type-bundle-for-my-chain","docId":"faq/where-do-i-get-a-type-bundle-for-my-chain"}],"href":"/docs/faq/"},{"type":"category","label":"Key Concepts","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Architecture","href":"/docs/key-concepts/architecture","docId":"key-concepts/architecture"},{"type":"link","label":"Processor","href":"/docs/key-concepts/processor","docId":"key-concepts/processor"},{"type":"link","label":"Substrate","href":"/docs/key-concepts/substrate","docId":"key-concepts/substrate"},{"type":"link","label":"Typegen","href":"/docs/key-concepts/typegen","docId":"key-concepts/typegen"}],"href":"/docs/key-concepts/"},{"type":"category","label":"mappings","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"SubstrateEvent","href":"/docs/mappings/substrateevent","docId":"mappings/substrateevent"}]},{"type":"link","label":"Overview","href":"/docs/overview","docId":"overview"},{"type":"link","label":"Quickstart","href":"/docs/quickstart","docId":"quickstart"},{"type":"category","label":"Recipes","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"Deploying a Squid","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Maintaining multiple versions","href":"/docs/recipes/deploying-a-squid/maintaining-multiple-versions","docId":"recipes/deploying-a-squid/maintaining-multiple-versions"},{"type":"link","label":"Monitoring and sync status","href":"/docs/recipes/deploying-a-squid/monitoring-and-sync-status","docId":"recipes/deploying-a-squid/monitoring-and-sync-status"},{"type":"link","label":"Obtaining a deployment key","href":"/docs/recipes/deploying-a-squid/obtaining-a-deployment-key","docId":"recipes/deploying-a-squid/obtaining-a-deployment-key"},{"type":"link","label":"Releasing a Squid version","href":"/docs/recipes/deploying-a-squid/releasing-a-squid-version","docId":"recipes/deploying-a-squid/releasing-a-squid-version"},{"type":"link","label":"Updating a Squid","href":"/docs/recipes/deploying-a-squid/updating-a-squid","docId":"recipes/deploying-a-squid/updating-a-squid"}],"href":"/docs/recipes/deploying-a-squid/"},{"type":"category","label":"Giant Squid API","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Client example","href":"/docs/recipes/giant-squid-api/client-example","docId":"recipes/giant-squid-api/client-example"},{"type":"link","label":"Queries","href":"/docs/recipes/giant-squid-api/queries","docId":"recipes/giant-squid-api/queries"}],"href":"/docs/recipes/giant-squid-api/"},{"type":"link","label":"How to launch an Archive","href":"/docs/recipes/how-to-launch-a-squid-archive","docId":"recipes/how-to-launch-a-squid-archive"},{"type":"link","label":"Migrate to v5","href":"/docs/recipes/migrate-to-v5","docId":"recipes/migrate-to-v5"},{"type":"category","label":"Running a Squid","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Building with Docker","href":"/docs/recipes/running-a-squid/building-with-docker","docId":"recipes/running-a-squid/building-with-docker"},{"type":"link","label":"Define a Squid Schema","href":"/docs/recipes/running-a-squid/define-a-squid-schema","docId":"recipes/running-a-squid/define-a-squid-schema"},{"type":"link","label":"Generate type-safe interfaces","href":"/docs/recipes/running-a-squid/generate-typescript-definitions","docId":"recipes/running-a-squid/generate-typescript-definitions"},{"type":"link","label":"Local runs","href":"/docs/recipes/running-a-squid/local-runs","docId":"recipes/running-a-squid/local-runs"},{"type":"link","label":"Multi-chain processors","href":"/docs/recipes/running-a-squid/multi-chain-processors","docId":"recipes/running-a-squid/multi-chain-processors"},{"type":"link","label":"Prometheus metrics","href":"/docs/recipes/running-a-squid/prometheus-metrics","docId":"recipes/running-a-squid/prometheus-metrics"},{"type":"link","label":"Schema updates","href":"/docs/recipes/running-a-squid/schema-updates","docId":"recipes/running-a-squid/schema-updates"}],"href":"/docs/recipes/running-a-squid/"}],"href":"/docs/recipes/"},{"type":"category","label":"Reference","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"API Extensions","href":"/docs/reference/api-extensions","docId":"reference/api-extensions"},{"type":"link","label":"EVM Processor","href":"/docs/reference/evm-processor","docId":"reference/evm-processor"},{"type":"category","label":"Handler functions","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Context Interfaces","href":"/docs/reference/handler-functions/context-interfaces","docId":"reference/handler-functions/context-interfaces"},{"type":"link","label":"Handler Interfaces","href":"/docs/reference/handler-functions/handler-interfaces","docId":"reference/handler-functions/handler-interfaces"},{"type":"link","label":"Handler Options Interfaces","href":"/docs/reference/handler-functions/handler-options-interfaces","docId":"reference/handler-functions/handler-options-interfaces"},{"type":"link","label":"Runtime upgrades","href":"/docs/reference/handler-functions/runtime-upgrades","docId":"reference/handler-functions/runtime-upgrades"}],"href":"/docs/reference/handler-functions/"},{"type":"category","label":"OpenReader Queries","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"AND/OR filters","href":"/docs/reference/openreader-queries/and-or-filters","docId":"reference/openreader-queries/and-or-filters"},{"type":"link","label":"Cross-relation field queries","href":"/docs/reference/openreader-queries/cross-relation-field-queries","docId":"reference/openreader-queries/cross-relation-field-queries"},{"type":"link","label":"JSON queries","href":"/docs/reference/openreader-queries/json-queries","docId":"reference/openreader-queries/json-queries"},{"type":"link","label":"Nested field queries","href":"/docs/reference/openreader-queries/nested-field-queries","docId":"reference/openreader-queries/nested-field-queries"},{"type":"link","label":"Resolve Union types/interfaces","href":"/docs/reference/openreader-queries/resolve-union-types-interfaces","docId":"reference/openreader-queries/resolve-union-types-interfaces"},{"type":"link","label":"String/Regex queries","href":"/docs/reference/openreader-queries/string-regex-queries","docId":"reference/openreader-queries/string-regex-queries"}],"href":"/docs/reference/openreader-queries/"},{"type":"category","label":"OpenReader Schema","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Annotations (Directives)","href":"/docs/reference/openreader-schema/annotations-directives","docId":"reference/openreader-schema/annotations-directives"},{"type":"link","label":"BigInt fields","href":"/docs/reference/openreader-schema/bigint-fields","docId":"reference/openreader-schema/bigint-fields"},{"type":"link","label":"Bytes fields","href":"/docs/reference/openreader-schema/bytes-fields","docId":"reference/openreader-schema/bytes-fields"},{"type":"link","label":"DateTime fields","href":"/docs/reference/openreader-schema/datetime-fields","docId":"reference/openreader-schema/datetime-fields"},{"type":"link","label":"Entity Relations","href":"/docs/reference/openreader-schema/entity-relations","docId":"reference/openreader-schema/entity-relations"},{"type":"link","label":"Full text search","href":"/docs/reference/openreader-schema/full-text-search","docId":"reference/openreader-schema/full-text-search"},{"type":"link","label":"Interfaces","href":"/docs/reference/openreader-schema/interfaces","docId":"reference/openreader-schema/interfaces"},{"type":"link","label":"JSON fields","href":"/docs/reference/openreader-schema/json-fields","docId":"reference/openreader-schema/json-fields"},{"type":"link","label":"Union types","href":"/docs/reference/openreader-schema/union-types","docId":"reference/openreader-schema/union-types"}],"href":"/docs/reference/openreader-schema/"},{"type":"category","label":"Squid CLI Reference","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"auth","href":"/docs/reference/squid-cli/auth","docId":"reference/squid-cli/auth"},{"type":"link","label":"codegen","href":"/docs/reference/squid-cli/codegen","docId":"reference/squid-cli/codegen"},{"type":"link","label":"db","href":"/docs/reference/squid-cli/db","docId":"reference/squid-cli/db"},{"type":"link","label":"help","href":"/docs/reference/squid-cli/help","docId":"reference/squid-cli/help"},{"type":"link","label":"Installation","href":"/docs/reference/squid-cli/installation","docId":"reference/squid-cli/installation"},{"type":"link","label":"squid","href":"/docs/reference/squid-cli/squid","docId":"reference/squid-cli/squid"}],"href":"/docs/reference/squid-cli/"},{"type":"link","label":"Squid EVM typegen","href":"/docs/reference/squid-evm-typegen","docId":"reference/squid-evm-typegen"},{"type":"link","label":"Squid Substrate metadata explorer","href":"/docs/reference/squid-substrate-metadata-explorer","docId":"reference/squid-substrate-metadata-explorer"},{"type":"link","label":"squid-substrate-typegen","href":"/docs/reference/squid-substrate-typegen","docId":"reference/squid-substrate-typegen"},{"type":"link","label":"Storage calls","href":"/docs/reference/storage-calls","docId":"reference/storage-calls"},{"type":"link","label":"Store interface","href":"/docs/reference/store-interface","docId":"reference/store-interface"},{"type":"link","label":"Substrate Processor","href":"/docs/reference/substrate-processor","docId":"reference/substrate-processor"}],"href":"/docs/reference/"},{"type":"category","label":"Tutorial","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Create a simple squid","href":"/docs/tutorial/create-a-simple-squid","docId":"tutorial/create-a-simple-squid"},{"type":"link","label":"Create an EVM-processing Squid","href":"/docs/tutorial/create-an-evm-processing-squid","docId":"tutorial/create-an-evm-processing-squid"},{"type":"link","label":"Deploy your first Squid","href":"/docs/tutorial/deploy-your-squid","docId":"tutorial/deploy-your-squid"},{"type":"link","label":"Development Environment set up","href":"/docs/tutorial/development-environment-set-up","docId":"tutorial/development-environment-set-up"},{"type":"category","label":"GraphQL","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Paginate query results","href":"/docs/tutorial/graphql/paginate-query-results","docId":"tutorial/graphql/paginate-query-results"},{"type":"link","label":"Queries","href":"/docs/tutorial/graphql/queries","docId":"tutorial/graphql/queries"},{"type":"link","label":"Sorting","href":"/docs/tutorial/graphql/sorting","docId":"tutorial/graphql/sorting"}],"href":"/docs/tutorial/graphql/"}],"href":"/docs/tutorial/"}]},"docs":{"faq/bug-reporting-guidelines":{"id":"faq/bug-reporting-guidelines","title":"Bug reporting guidelines","description":"Overview","sidebar":"tutorialSidebar"},"faq/how-do-i-decode-the-event-data-and-how-to-deal-with-runtime-upgrades":{"id":"faq/how-do-i-decode-the-event-data-and-how-to-deal-with-runtime-upgrades","title":"How do I decode the event data? And how to deal with runtime upgrades?","description":"See the dedicated tutorial on generating TypeScript definitions for blockchain events.","sidebar":"tutorialSidebar"},"faq/how-do-i-deploy-my-api-to-the-subsquid-hosted-service":{"id":"faq/how-do-i-deploy-my-api-to-the-subsquid-hosted-service","title":"How do I deploy my API to the Subsquid Hosted service?","description":"Follow the dedicated Tutorial","sidebar":"tutorialSidebar"},"faq/how-do-i-know-which-events-and-extrinsics-i-need-for-the-handlers":{"id":"faq/how-do-i-know-which-events-and-extrinsics-i-need-for-the-handlers","title":"How do I know which events and extrinsics I need for the handlers?","description":"This part depends on the runtime business logic of the chain. The primary and the most reliable source of information is thus the Rust sources for the pallets used by the chain.","sidebar":"tutorialSidebar"},"faq/how-do-i-run-and-test-the-graphql-api":{"id":"faq/how-do-i-run-and-test-the-graphql-api","title":"How do I run and test the GraphQL API?","description":"Once the migrations are applied, simply run","sidebar":"tutorialSidebar"},"faq/how-do-i-start-the-processor":{"id":"faq/how-do-i-start-the-processor","title":"How do I start the processor?","description":"First, make sure you have compiled your project with","sidebar":"tutorialSidebar"},"faq/how-do-i-update-my-schema":{"id":"faq/how-do-i-update-my-schema","title":"How do I update my schema?","description":"Destructive option","sidebar":"tutorialSidebar"},"faq/how-do-i-write-the-schema":{"id":"faq/how-do-i-write-the-schema","title":"How do I write the schema?","description":"The schema file defines the shape of the final GraphQL API and has very few limitations. Designing the schema file is very similar to the design of the database schema. As a rule of thumb, the schema should represent high level domain specific entities and relations between them, to make data fetching and filtering easy for the API consumers.","sidebar":"tutorialSidebar"},"faq/how-to-run-a-processor-against-a-different-chain":{"id":"faq/how-to-run-a-processor-against-a-different-chain","title":"How to run a processor against a different chain?","description":"You will need to have WebSocket endpoint to connect to the chain node and a Squid Archive. For a registry of Squid Archives, check this community-owned Archive Registry","sidebar":"tutorialSidebar"},"faq/README":{"id":"faq/README","title":"Support","description":"Find answers to your questions","sidebar":"tutorialSidebar"},"faq/where-do-i-get-a-type-bundle-for-my-chain":{"id":"faq/where-do-i-get-a-type-bundle-for-my-chain","title":"Where do I get a type bundle for my chain?","description":"Most chains publish their type bundles as an npm package (for example: Edgeware). One of the best places to check for the latest version is the polkadot-js/app and polkadot-js/api repositories. It\'s worth noting, however, that a types bundle is only needed for pre-Metadata v14 blocks, so for recently deployed chains it may be not needed.","sidebar":"tutorialSidebar"},"key-concepts/architecture":{"id":"key-concepts/architecture","title":"Architecture","description":"Explaining the main components of a Subsquid Query Node","sidebar":"tutorialSidebar"},"key-concepts/processor":{"id":"key-concepts/processor","title":"Processor","description":"The SubstrateProcessor is the main actor in transforming and loading on-chain data, according to pre-defined database model","sidebar":"tutorialSidebar"},"key-concepts/README":{"id":"key-concepts/README","title":"Key Concepts","description":"This section includes explanations of important subjects for developing with Subsquid","sidebar":"tutorialSidebar"},"key-concepts/substrate":{"id":"key-concepts/substrate","title":"Substrate","description":"A brief description of the blockchain framework upon which Subsquid is based and its main concepts.","sidebar":"tutorialSidebar"},"key-concepts/typegen":{"id":"key-concepts/typegen","title":"Typegen","description":"Squid Typegen is a code generation tool for creating Typescript types for substrate Events, Extrinsics, Storage Items (for Substrate) and EVM logs.","sidebar":"tutorialSidebar"},"mappings/substrateevent":{"id":"mappings/substrateevent","title":"SubstrateEvent","description":"Interface containing the required information about the emitted Substrate event","sidebar":"tutorialSidebar"},"overview":{"id":"overview","title":"Overview","description":"This documentation provides information for all degrees of expertise, varying from complete beginner, to those who only need a refresher on specific commands.","sidebar":"tutorialSidebar"},"quickstart":{"id":"quickstart","title":"Quickstart","description":"Getting started","sidebar":"tutorialSidebar"},"recipes/deploying-a-squid/maintaining-multiple-versions":{"id":"recipes/deploying-a-squid/maintaining-multiple-versions","title":"Maintaining multiple versions","description":"At times, it may be useful to deploy multiple versions of the same Squid. For example, to test an advanced feature or to maintain retro-compatibility, following legacy-breaking changes.","sidebar":"tutorialSidebar"},"recipes/deploying-a-squid/monitoring-and-sync-status":{"id":"recipes/deploying-a-squid/monitoring-and-sync-status","title":"Monitoring and sync status","description":"The Subsquid SDK offers a useful command line tool to monitor the Cloud-deployed Squid. the tail subcommand will output the logs of a Squid, when providing its name and version.","sidebar":"tutorialSidebar"},"recipes/deploying-a-squid/obtaining-a-deployment-key":{"id":"recipes/deploying-a-squid/obtaining-a-deployment-key","title":"Obtaining a deployment key","description":"This short guide shows how to obtain a deployment key for a Squid in our Software as a Service webpage.","sidebar":"tutorialSidebar"},"recipes/deploying-a-squid/README":{"id":"recipes/deploying-a-squid/README","title":"Deploying a Squid","description":"This section goes over some of the most common tasks to accomplish when it comes to deploying a Squid to our SaaS.","sidebar":"tutorialSidebar"},"recipes/deploying-a-squid/releasing-a-squid-version":{"id":"recipes/deploying-a-squid/releasing-a-squid-version","title":"Releasing a Squid version","description":"Deploy your code","sidebar":"tutorialSidebar"},"recipes/deploying-a-squid/updating-a-squid":{"id":"recipes/deploying-a-squid/updating-a-squid","title":"Updating a Squid","description":"With and without resetting the database","sidebar":"tutorialSidebar"},"recipes/giant-squid-api/client-example":{"id":"recipes/giant-squid-api/client-example","title":"Client example","description":"As mentioned before, any client wanting to aggregate multi-chain data available via the Giant Squid API, needs to perform two tasks:","sidebar":"tutorialSidebar"},"recipes/giant-squid-api/queries":{"id":"recipes/giant-squid-api/queries","title":"Queries","description":"The Giant Squid API is available at this endpoint and here is a look at the GraphiQL playground interface.","sidebar":"tutorialSidebar"},"recipes/giant-squid-api/README":{"id":"recipes/giant-squid-api/README","title":"Giant Squid API","description":"Introducing the Giant Squid API, a single endpoint containing data from multiple chains and parachains","sidebar":"tutorialSidebar"},"recipes/how-to-launch-a-squid-archive":{"id":"recipes/how-to-launch-a-squid-archive","title":"How to launch an Archive","description":"Quick how-to on running an Archive for a specific blockchain.","sidebar":"tutorialSidebar"},"recipes/migrate-to-v5":{"id":"recipes/migrate-to-v5","title":"Migrate to v5","description":"Version 5 of Squid introduced many changes, and a good part of them are not retro-compatible, so some actions are required to update and make sure the project still runs as it\'s supposed to.","sidebar":"tutorialSidebar"},"recipes/README":{"id":"recipes/README","title":"Recipes","description":"","sidebar":"tutorialSidebar"},"recipes/running-a-squid/building-with-docker":{"id":"recipes/running-a-squid/building-with-docker","title":"Building with Docker","description":"The squid template repository comes with a Dockerfile included.","sidebar":"tutorialSidebar"},"recipes/running-a-squid/define-a-squid-schema":{"id":"recipes/running-a-squid/define-a-squid-schema","title":"Define a Squid Schema","description":"The schema will help create database entities, as well as TypeScript classes wrapping them, and will be exposed to API clients by the GraphQL server.","sidebar":"tutorialSidebar"},"recipes/running-a-squid/generate-typescript-definitions":{"id":"recipes/running-a-squid/generate-typescript-definitions","title":"Generate type-safe interfaces","description":"Learn how to leverage Subsquid SDK automated tools to create TypeScript classes for Substrate Events, calls and Storage items.","sidebar":"tutorialSidebar"},"recipes/running-a-squid/local-runs":{"id":"recipes/running-a-squid/local-runs","title":"Local runs","description":"This guide considers that a Squid project has been created or that the Squid template repository has been cloned and maybe customized.","sidebar":"tutorialSidebar"},"recipes/running-a-squid/multi-chain-processors":{"id":"recipes/running-a-squid/multi-chain-processors","title":"Multi-chain processors","description":"Subsquid framework does not impose any limit\'s to the builder\'s creativity. Thanks to its modular structure and multi-layer architecture, it is possible to develop multiple processors, connected to multiple blockchain archives, as part of one single Squid API.","sidebar":"tutorialSidebar"},"recipes/running-a-squid/prometheus-metrics":{"id":"recipes/running-a-squid/prometheus-metrics","title":"Prometheus metrics","description":"The Subsquid SDK comes with Prometheus metrics to monitor synchronization status. When launching the processor, it is sufficient to specify the port at which metrics should be served via the environment variable PROCESSORPROMETHEUSPORT.","sidebar":"tutorialSidebar"},"recipes/running-a-squid/README":{"id":"recipes/running-a-squid/README","title":"Running a Squid","description":"","sidebar":"tutorialSidebar"},"recipes/running-a-squid/schema-updates":{"id":"recipes/running-a-squid/schema-updates","title":"Schema updates","description":"Over the course of development of an API it is often the case that new things are discovered, requests for changes happen, and so it may happen that a change to the previously defined schema is necessary.","sidebar":"tutorialSidebar"},"reference/api-extensions":{"id":"reference/api-extensions","title":"API Extensions","description":"Squid alows to extend the GraphQL auto-generated schema with custom queries.","sidebar":"tutorialSidebar"},"reference/evm-processor":{"id":"reference/evm-processor","title":"EVM Processor","description":"Subsquid API framework was initially built with Substrate blockchains in mind. It is fully and natively compatible with all network built with such scheme.","sidebar":"tutorialSidebar"},"reference/handler-functions/context-interfaces":{"id":"reference/handler-functions/context-interfaces","title":"Context Interfaces","description":"As mentioned in the parent page, the Subsquid SDK defines three interfaces for the Context objects passed to each Handler function. Here is the detailed reference for each one.","sidebar":"tutorialSidebar"},"reference/handler-functions/handler-interfaces":{"id":"reference/handler-functions/handler-interfaces","title":"Handler Interfaces","description":"We already discussed that there are three different types of Handlers. Subsquid SDK defines interface for these functions, so that the methods to attach them to a Processor can be type-safe. Here are their definitions.","sidebar":"tutorialSidebar"},"reference/handler-functions/handler-options-interfaces":{"id":"reference/handler-functions/handler-options-interfaces","title":"Handler Options Interfaces","description":"The previous pages discussed the different types of Handlers, their Interfaces, how they can be added to the Processor. When attaching a handler to the Processor, the Subsquid SDK also allows to provide options and it defines interface for them. Here are their definitions and how they can influence the Handler execution.","sidebar":"tutorialSidebar"},"reference/handler-functions/README":{"id":"reference/handler-functions/README","title":"Handler functions","description":"Handlers are a foundational ingredient of the Processor component of a Squid API. Sometimes referred to as Hooks, Handlers are, in simpler terms, functions whose execution is triggered by the Processor before (pre-Block hook) or after (post-Block hook) processing a block, or, alternatively, when the Processor encounters a previously configured Substrate Event or Substrate Extrinsic.","sidebar":"tutorialSidebar"},"reference/handler-functions/runtime-upgrades":{"id":"reference/handler-functions/runtime-upgrades","title":"Runtime upgrades","description":"(and how to deal with them)","sidebar":"tutorialSidebar"},"reference/openreader-queries/and-or-filters":{"id":"reference/openreader-queries/and-or-filters","title":"AND/OR filters","description":"Overview","sidebar":"tutorialSidebar"},"reference/openreader-queries/cross-relation-field-queries":{"id":"reference/openreader-queries/cross-relation-field-queries","title":"Cross-relation field queries","description":"Introduction","sidebar":"tutorialSidebar"},"reference/openreader-queries/json-queries":{"id":"reference/openreader-queries/json-queries","title":"JSON queries","description":"Powerful queries leveraging JSON objects as fields in a schema","sidebar":"tutorialSidebar"},"reference/openreader-queries/nested-field-queries":{"id":"reference/openreader-queries/nested-field-queries","title":"Nested field queries","description":"Overview","sidebar":"tutorialSidebar"},"reference/openreader-queries/README":{"id":"reference/openreader-queries/README","title":"OpenReader Queries","description":"Collections of Reference pages dedicated to GraphQL queries","sidebar":"tutorialSidebar"},"reference/openreader-queries/resolve-union-types-interfaces":{"id":"reference/openreader-queries/resolve-union-types-interfaces","title":"Resolve Union types/interfaces","description":"Use the __typename meta field to resolve types when querying unions or interfaces","sidebar":"tutorialSidebar"},"reference/openreader-queries/string-regex-queries":{"id":"reference/openreader-queries/string-regex-queries","title":"String/Regex queries","description":"","sidebar":"tutorialSidebar"},"reference/openreader-schema/annotations-directives":{"id":"reference/openreader-schema/annotations-directives","title":"Annotations (Directives)","description":"Directives are a native feature of GraphQL, whose purpose is to affect execution of the query in any way the server desires when attached to fields. They are also commonly known as Annotations in other languages such as Java.","sidebar":"tutorialSidebar"},"reference/openreader-schema/bigint-fields":{"id":"reference/openreader-schema/bigint-fields","title":"BigInt fields","description":"GraphQL objects types have names and fields, but at the end of the day, these fields will either have to be other object types, or resolve to some concrete data. This concrete data is represented by Scalar types. GraphQL comes with its own default set of Scalar types, but different implementations can define their own.","sidebar":"tutorialSidebar"},"reference/openreader-schema/bytes-fields":{"id":"reference/openreader-schema/bytes-fields","title":"Bytes fields","description":"GraphQL objects types have names and fields, but at the end of the day, these fields will either have to be other object types, or resolve to some concrete data. This concrete data is represented by Scalar types. GraphQL comes with its own default set of Scalar types, but different implementations can define their own.","sidebar":"tutorialSidebar"},"reference/openreader-schema/datetime-fields":{"id":"reference/openreader-schema/datetime-fields","title":"DateTime fields","description":"GraphQL objects types have names and fields, but at the end of the day, these fields will either have to be other object types, or resolve to some concrete data. This concrete data is represented by Scalar types. GraphQL comes with its own default set of Scalar types, but different implementations can define their own.","sidebar":"tutorialSidebar"},"reference/openreader-schema/entity-relations":{"id":"reference/openreader-schema/entity-relations","title":"Entity Relations","description":"One-to-One/One-to-Many/Many-to-One/Many-to-Many entity relations","sidebar":"tutorialSidebar"},"reference/openreader-schema/full-text-search":{"id":"reference/openreader-schema/full-text-search","title":"Full text search","description":"How to define a schema that allows full text search across fields","sidebar":"tutorialSidebar"},"reference/openreader-schema/interfaces":{"id":"reference/openreader-schema/interfaces","title":"Interfaces","description":"{% hint style=\\"danger\\" %}","sidebar":"tutorialSidebar"},"reference/openreader-schema/json-fields":{"id":"reference/openreader-schema/json-fields","title":"JSON fields","description":"Our OpenReader implementation allows the definition of complex objects as fields. The result is that queries can retrieve these fields as JSON objects. That\'s why we decided to call them JSON fields.","sidebar":"tutorialSidebar"},"reference/openreader-schema/README":{"id":"reference/openreader-schema/README","title":"OpenReader Schema","description":"","sidebar":"tutorialSidebar"},"reference/openreader-schema/union-types":{"id":"reference/openreader-schema/union-types","title":"Union types","description":"Union types may look similar to Interfaces and in some ways they are, but there is a very important difference between them and it is that Unions cannot specify common fields between types that are part of them.","sidebar":"tutorialSidebar"},"reference/README":{"id":"reference/README","title":"Reference","description":"","sidebar":"tutorialSidebar"},"reference/squid-cli/auth":{"id":"reference/squid-cli/auth","title":"auth","description":"The auth command of the sqd command line interface is used to authorize the current terminal session to interact with the Squid SaaS hosted solution.","sidebar":"tutorialSidebar"},"reference/squid-cli/codegen":{"id":"reference/squid-cli/codegen","title":"codegen","description":"The codegen is used to generate TypeScript classes that model the entities defined in schema.graphql file.","sidebar":"tutorialSidebar"},"reference/squid-cli/db":{"id":"reference/squid-cli/db","title":"db","description":"The db topic of the sqd command line interface is used to manage the database of your Squid project. This is often necessary after having modified the schema.graphql with new or different entities and having generated model classes via the codegen command.","sidebar":"tutorialSidebar"},"reference/squid-cli/help":{"id":"reference/squid-cli/help","title":"help","description":"The help command will list all available commands and topics of the sqd command line interface and their usage.","sidebar":"tutorialSidebar"},"reference/squid-cli/installation":{"id":"reference/squid-cli/installation","title":"Installation","description":"Installation","sidebar":"tutorialSidebar"},"reference/squid-cli/README":{"id":"reference/squid-cli/README","title":"Squid CLI Reference","description":"Reference page of the Squid CLI tools","sidebar":"tutorialSidebar"},"reference/squid-cli/squid":{"id":"reference/squid-cli/squid","title":"squid","description":"[//]: # (# squid)","sidebar":"tutorialSidebar"},"reference/squid-evm-typegen":{"id":"reference/squid-evm-typegen","title":"Squid EVM typegen","description":"Reference page of the squid-evm-typegen command line tool","sidebar":"tutorialSidebar"},"reference/squid-substrate-metadata-explorer":{"id":"reference/squid-substrate-metadata-explorer","title":"Squid Substrate metadata explorer","description":"Reference page of the squid-substrate-metadata-explorer command line tool","sidebar":"tutorialSidebar"},"reference/squid-substrate-typegen":{"id":"reference/squid-substrate-typegen","title":"squid-substrate-typegen","description":"[//]: # (---)","sidebar":"tutorialSidebar"},"reference/storage-calls":{"id":"reference/storage-calls","title":"Storage calls","description":"It is sometimes impossible to extract the required data with only event and extrinsic data. StorageContext exposes direct queries of runtime storage items via RPC.","sidebar":"tutorialSidebar"},"reference/store-interface":{"id":"reference/store-interface","title":"Store interface","description":"When working with Subsquid SDK and building on the SubstrateProcessor, the Store is a very important concept one. As briefly explained in the Key Concept page dedicated to the Processor, it serves as an interface for the data-persistence layer, often represented by a database.","sidebar":"tutorialSidebar"},"reference/substrate-processor":{"id":"reference/substrate-processor","title":"Substrate Processor","description":"The main explanation and overview for the Processor component of a Squid has been treated in the Key Concepts section. This page will go over the most important customizations a developer would want to make, when building their API.","sidebar":"tutorialSidebar"},"tutorial/create-a-simple-squid":{"id":"tutorial/create-a-simple-squid","title":"Create a simple squid","description":"This page is about taking the Squid template and customizing it to create a simple project","sidebar":"tutorialSidebar"},"tutorial/create-an-evm-processing-squid":{"id":"tutorial/create-an-evm-processing-squid","title":"Create an EVM-processing Squid","description":"Objective","sidebar":"tutorialSidebar"},"tutorial/deploy-your-squid":{"id":"tutorial/deploy-your-squid","title":"Deploy your first Squid","description":"Launch a Squid node hosted in the Cloud by Subsquid","sidebar":"tutorialSidebar"},"tutorial/development-environment-set-up":{"id":"tutorial/development-environment-set-up","title":"Development Environment set up","description":"Prepare your Development Environment to run, customize and build a Squid Template","sidebar":"tutorialSidebar"},"tutorial/graphql/paginate-query-results":{"id":"tutorial/graphql/paginate-query-results","title":"Paginate query results","description":"When query results are too big, one can chose to limit them or divide them in \\"chunks\\"","sidebar":"tutorialSidebar"},"tutorial/graphql/queries":{"id":"tutorial/graphql/queries","title":"Queries","description":"Introduction","sidebar":"tutorialSidebar"},"tutorial/graphql/README":{"id":"tutorial/graphql/README","title":"GraphQL","description":"Section dedicated to a small collection of tutorials about the main concepts of GraphQL APIs.","sidebar":"tutorialSidebar"},"tutorial/graphql/sorting":{"id":"tutorial/graphql/sorting","title":"Sorting","description":"The orderBy argument has been introduced in the previous section, but let\'s take a look at it in more detail.","sidebar":"tutorialSidebar"},"tutorial/README":{"id":"tutorial/README","title":"Tutorial","description":"","sidebar":"tutorialSidebar"}}}')}}]);