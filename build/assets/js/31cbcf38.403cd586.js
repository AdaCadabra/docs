"use strict";(self.webpackChunksubsquid_docs=self.webpackChunksubsquid_docs||[]).push([[5582],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return f}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=c(n),f=o,y=d["".concat(p,".").concat(f)]||d[f]||u[f]||a;return n?r.createElement(y,i(i({ref:t},l),{},{components:n})):r.createElement(y,i({ref:t},l))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},24368:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return p},default:function(){return f},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return u}});var r=n(87462),o=n(63366),a=(n(67294),n(3905)),i=["components"],s={},p="Where do I get a type bundle for my chain?",c={unversionedId:"faq/where-do-i-get-a-type-bundle-for-my-chain",id:"faq/where-do-i-get-a-type-bundle-for-my-chain",title:"Where do I get a type bundle for my chain?",description:"Most chains publish their type bundles as an npm package (for example: Edgeware). One of the best places to check for the latest version is the polkadot-js/app and polkadot-js/api repositories. It's worth noting, however, that a types bundle is only needed for pre-Metadata v14 blocks, so for recently deployed chains it may be not needed.",source:"@site/docs/faq/where-do-i-get-a-type-bundle-for-my-chain.md",sourceDirName:"faq",slug:"/faq/where-do-i-get-a-type-bundle-for-my-chain",permalink:"/docs/faq/where-do-i-get-a-type-bundle-for-my-chain",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/faq/where-do-i-get-a-type-bundle-for-my-chain.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"How to run a processor against a different chain?",permalink:"/docs/faq/how-to-run-a-processor-against-a-different-chain"},next:{title:"Key Concepts",permalink:"/docs/key-concepts/"}},l={},u=[],d={toc:u};function f(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"where-do-i-get-a-type-bundle-for-my-chain"},"Where do I get a type bundle for my chain?"),(0,a.kt)("p",null,"Most chains publish their type bundles as an npm package (for example: ",(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@edgeware/node-types"},"Edgeware"),"). One of the best places to check for the latest version is the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/polkadot-js/apps/tree/master/packages/apps-config/src/api/spec"},"polkadot-js/app")," and ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/polkadot-js/api/tree/master/packages/types-known/src/spec"},"polkadot-js/api")," repositories. It's worth noting, however, that a types bundle is only needed for pre-Metadata v14 blocks, so for recently deployed chains it may be not needed."),(0,a.kt)("p",null,'{% hint style="info" %}\n',(0,a.kt)("strong",{parentName:"p"},"Note:")," the type bundle format for typegen is slightly different from ",(0,a.kt)("inlineCode",{parentName:"p"},"OverrideBundleDefinition")," of ",(0,a.kt)("inlineCode",{parentName:"p"},"polkadot.js"),". The structure is as follows, all the fields are optional.\n{% endhint %}"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"{\n  types: {}, // top-level type definitions, as `.types` option of `ApiPromise`\n  typesAlias: {}, // top-level type alieases, as `.typesAlias` option of `ApiPromise`\n  versions: [ // spec version specific overrides, same as `OverrideBundleDefinition.types` of `polkadot.js`\n    {\n       minmax: [0, 1010] // spec range\n       types: {}, // type overrides for the spec range\n       typesAlias: {}, // type alias overrides for the spec range\n    }\n  ]\n}\n")))}f.isMDXComponent=!0}}]);