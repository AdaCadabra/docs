"use strict";(self.webpackChunksubsquid_docs=self.webpackChunksubsquid_docs||[]).push([[6968],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),f=s(n),d=a,m=f["".concat(l,".").concat(d)]||f[d]||p[d]||o;return n?r.createElement(m,i(i({ref:t},u),{},{components:n})):r.createElement(m,i({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=f;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},67301:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return c},metadata:function(){return s},toc:function(){return p}});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),i=["components"],c={description:"How to define a schema that allows full text search across fields"},l="Full text search",s={unversionedId:"reference/openreader-schema/full-text-search",id:"reference/openreader-schema/full-text-search",title:"Full text search",description:"How to define a schema that allows full text search across fields",source:"@site/docs/reference/openreader-schema/full-text-search.md",sourceDirName:"reference/openreader-schema",slug:"/reference/openreader-schema/full-text-search",permalink:"/docs/reference/openreader-schema/full-text-search",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/reference/openreader-schema/full-text-search.md",tags:[],version:"current",frontMatter:{description:"How to define a schema that allows full text search across fields"},sidebar:"tutorialSidebar",previous:{title:"Entity Relations",permalink:"/docs/reference/openreader-schema/entity-relations"},next:{title:"Interfaces",permalink:"/docs/reference/openreader-schema/interfaces"}},u={},p=[],f={toc:p};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"full-text-search"},"Full text search"),(0,o.kt)("p",null,"On top of other Directives implemented in OpenReader defined in the previous page, there is one that might deserve a special mention."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"@fulltext")," annotation can only be applied to ",(0,o.kt)("inlineCode",{parentName:"p"},"String")," Scalar fields and will allow queries to search some text in the entire field."),(0,o.kt)("p",null,"Let's take a look at a very simple schema making use of this:"),(0,o.kt)("p",null,'{% code title="schema.graphql" %}'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},'" All transfers "\ntype Transfer @entity @index(fields: ["block", "extrinsicId"]) {\n  from: Bytes! @index\n  to: Bytes!\n  fromAccount: Account\n  toAccount: Account\n  value: BigInt!\n  comment: String @fulltext(query: "commentSearch")\n  block: Int!\n  tip: BigInt!\n  timestamp: BigInt!\n  insertedAt: DateTime!\n  extrinsicId: String\n}\n\ntype Account @entity {\n  "Account address"\n  id: ID!\n  balance: BigInt!\n  incomingTx: [Transfer!] @derivedFrom(field: "toAccount")\n  outgoingTx: [Transfer!] @derivedFrom(field: "fromAccount")\n}\n\n')),(0,o.kt)("p",null,"{% endcode %}"),(0,o.kt)("p",null,"There are other annotations, treated in the ",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/openreader-schema/annotations-directives"},"related page"),", what we are interested here is the ",(0,o.kt)("inlineCode",{parentName:"p"},"comment")," field of ",(0,o.kt)("inlineCode",{parentName:"p"},"Transfer")," type, which will automatically generate a new query, with the named specified in the ",(0,o.kt)("inlineCode",{parentName:"p"},"query")," parameter."),(0,o.kt)("p",null,"To see it in action, here is an example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},'query {\n    commentSearch(text: "hello") {\n        item {\n            ... on Transfer {\n                from, \n                to,\n                value,\n                timestamp\n            }\n        }\n        highlight\n    }\n}\n')),(0,o.kt)("p",null,"which, imagining there is, indeed, a ",(0,o.kt)("inlineCode",{parentName:"p"},"Transfer")," entry with a comment containing the word ",(0,o.kt)("inlineCode",{parentName:"p"},"hello"),", it would yield this result:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},"{\n    commentSearch: [{\n        item: {\n            from: '0xb0a8d493285c2df73290dfb7e61f870f17b41801197a149ca93654499ea3dafe', \n            to: '0xb0a8d493285c2df73290dfb7e61f870f17b41801197a149ca93654499ea3dafe',\n            value: 1000,\n            timestamp: '2020-12-24T23:59:59.999Z',\n        },\n        highlight: 'Hey there, <b>hello</b>! Here's some money'\n    }]\n}\n")))}d.isMDXComponent=!0}}]);