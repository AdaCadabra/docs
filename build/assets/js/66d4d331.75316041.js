"use strict";(self.webpackChunksubsquid_docs=self.webpackChunksubsquid_docs||[]).push([[2614],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return f}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),p=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=p(e.components);return r.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},l=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),l=p(t),f=o,m=l["".concat(c,".").concat(f)]||l[f]||d[f]||a;return t?r.createElement(m,i(i({ref:n},u),{},{components:t})):r.createElement(m,i({ref:n},u))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=l;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}l.displayName="MDXCreateElement"},30133:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return d}});var r=t(87462),o=t(63366),a=(t(67294),t(3905)),i=["components"],s={description:"Use the __typename meta field to resolve types when querying unions or interfaces"},c="Resolve Union types/interfaces",p={unversionedId:"reference/openreader-queries/resolve-union-types-interfaces",id:"reference/openreader-queries/resolve-union-types-interfaces",title:"Resolve Union types/interfaces",description:"Use the __typename meta field to resolve types when querying unions or interfaces",source:"@site/docs/reference/openreader-queries/resolve-union-types-interfaces.md",sourceDirName:"reference/openreader-queries",slug:"/reference/openreader-queries/resolve-union-types-interfaces",permalink:"/docs/reference/openreader-queries/resolve-union-types-interfaces",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/reference/openreader-queries/resolve-union-types-interfaces.md",tags:[],version:"current",frontMatter:{description:"Use the __typename meta field to resolve types when querying unions or interfaces"},sidebar:"tutorialSidebar",previous:{title:"Nested field queries",permalink:"/docs/reference/openreader-queries/nested-field-queries"},next:{title:"String/Regex queries",permalink:"/docs/reference/openreader-queries/string-regex-queries"}},u={},d=[],l={toc:d};function f(e){var n=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"resolve-union-typesinterfaces"},"Resolve Union types/interfaces"),(0,a.kt)("p",null,"The use cases for ",(0,a.kt)("a",{parentName:"p",href:"/docs/reference/openreader-schema/union-types"},"Union types")," and ",(0,a.kt)("a",{parentName:"p",href:"/docs/reference/openreader-schema/interfaces"},"Interfaces")," has been discussed in the related schema reference pages."),(0,a.kt)("p",null,"In that context, examples also showed how to query them. What's important to know is that these might create situations where it's not possible to know what type the GraphQL service is returning. To overcome this scenario, it is important to find some way to determine how to handle that data on the client."),(0,a.kt)("p",null,"This is where the ",(0,a.kt)("inlineCode",{parentName:"p"},"__typename")," meta filed comes in. To witness it in action, let's take the schema from the ",(0,a.kt)("a",{parentName:"p",href:"/docs/reference/openreader-schema/union-types"},"Union types")," page:"),(0,a.kt)("p",null,'{% code title="schema.graphql" %}'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},'type Account @entity {\n  id: ID! #Account address\n  workReports: [WorkReport] @derivedFrom(field: "account")\n  joinGroups: [JoinGroup] @derivedFrom(field: "member")\n  storageOrders: [StorageOrder] @derivedFrom (field: "account")\n}\n\ntype WorkReport @entity {\n  id: ID! #event id\n  account: Account!\n  addedFiles: [[String]]\n  deletedFiles: [[String]]\n  extrinisicId: String\n  createdAt: DateTime!\n  blockHash: String!\n  blockNum: Int!\n}\n\ntype JoinGroup @entity {\n  id: ID!\n  member: Account!\n  owner: String!\n  extrinisicId: String\n  createdAt: DateTime!\n  blockHash: String!\n  blockNum: Int!\n}\n\ntype StorageOrder @entity {\n  id: ID!\n  account: Account!\n  fileCid: String!\n  extrinisicId: String\n  createdAt: DateTime!\n  blockHash: String!\n  blockNum: Int!\n}\n\nunion Event = WorkReport | JoinGroup | StorageOrder\n\n')),(0,a.kt)("p",null,"{% endcode %}"),(0,a.kt)("p",null,"This time, if we use this query:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},'query EventQuery {\n  event(where: {created_at_gt: "2022-01-01T00:00:00.000Z"} {\n    __typename \n    ... on WorkReport {\n      id\n      createdAt\n      blockHash\n    }\n    ... on JoinGroup {\n      id\n      createdAt\n      blockHash\n    }\n    ... on StorageOrder {\n      id\n      createdAt\n      blockHash\n    }\n  }\n}\n\n')),(0,a.kt)("p",null,"It would be impossible to discern a returned object type from the other, without ",(0,a.kt)("inlineCode",{parentName:"p"},"__typename"),", because we only queried for fields that are common, or that have the same name across all object types. This is a sample result of the above query:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n    event: [\n      {\n        "__typename": "WorkReport",\n        "id": "1"\n        "createdAt": "2022-01-01T00:00:00.000Z"\n        "blockHash": "0xb0a8d493285c2df73290dfb7e61f870f17b41801197a149ca93654499ea3dafe"\n      },\n      {\n        "__typename": "WorkReport",\n        "id": "2"\n        "createdAt": "2022-01-01T00:00:00.000Z"\n        "blockHash": "0xcd123ac567bbedf73290dfb7e61f870f17b41801197a149ca9365455de34ac3b"\n      },\n      {\n        "__typename": "JoinGroup",\n        "id": "1"\n        "createdAt": "2022-01-01T00:00:00.000Z"\n        "blockHash": "0xace45fe78aa367f73290dfb7e61f870f17b41801197a149ca936544fe09ae87c"\n      },\n      {\n        "__typename": "StorageOrder",\n        "id": "1000"\n        "createdAt": "2022-01-01T00:00:00.000Z"\n        "blockHash": "0xb0a8d493285c2df73290dfb7e61f870f17b41801197a149ca93654499ea3dafe"\n      },\n      {\n        "__typename": "StorageOrder",\n        "id": "1001"\n        "createdAt": "2022-01-01T00:00:00.000Z"\n        "blockHash": "0xbfd57689facdf73290dfb7e61f870f17b41801197a149ca9365gac45cece097a"\n      }\n    ]\n}\n')),(0,a.kt)("p",null,"Because all the returned objects have the same structure, the only way to know if one of the is a ",(0,a.kt)("inlineCode",{parentName:"p"},"WorkReport")," or a ",(0,a.kt)("inlineCode",{parentName:"p"},"JoinGroup")," or a ",(0,a.kt)("inlineCode",{parentName:"p"},"StorageOrder")," is using the ",(0,a.kt)("inlineCode",{parentName:"p"},"__typename")," meta field."))}f.isMDXComponent=!0}}]);