"use strict";(self.webpackChunksubsquid_docs=self.webpackChunksubsquid_docs||[]).push([[9976],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=u(n),m=r,f=c["".concat(s,".").concat(m)]||c[m]||d[m]||i;return n?a.createElement(f,l(l({ref:t},p),{},{components:n})):a.createElement(f,l({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var u=2;u<i;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},2888:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return o},metadata:function(){return u},toc:function(){return d}});var a=n(87462),r=n(63366),i=(n(67294),n(3905)),l=["components"],o={description:"Reference page of the squid-substrate-metadata-explorer command line tool"},s="Squid Substrate metadata explorer",u={unversionedId:"reference/squid-substrate-metadata-explorer",id:"reference/squid-substrate-metadata-explorer",title:"Squid Substrate metadata explorer",description:"Reference page of the squid-substrate-metadata-explorer command line tool",source:"@site/docs/reference/squid-substrate-metadata-explorer.md",sourceDirName:"reference",slug:"/reference/squid-substrate-metadata-explorer",permalink:"/docs/reference/squid-substrate-metadata-explorer",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/reference/squid-substrate-metadata-explorer.md",tags:[],version:"current",frontMatter:{description:"Reference page of the squid-substrate-metadata-explorer command line tool"},sidebar:"tutorialSidebar",previous:{title:"Squid EVM typegen",permalink:"/docs/reference/squid-evm-typegen"},next:{title:"squid-substrate-typegen",permalink:"/docs/reference/squid-substrate-typegen"}},p={},d=[{value:"Installation",id:"installation",level:2},{value:"Options for <code>squid-substrate-metadata-explorer</code> command",id:"options-for-squid-substrate-metadata-explorer-command",level:3},{value:"Output file structure",id:"output-file-structure",level:2}],c={toc:d};function m(e){var t=e.components,n=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"squid-substrate-metadata-explorer"},"Squid Substrate metadata explorer"),(0,i.kt)("h2",{id:"installation"},"Installation"),(0,i.kt)("p",null,"The Squid substrate metadata explorer tool is part of Subsquid SDK and is used for extracting metadata information about a specific chain."),(0,i.kt)("p",null,"This is useful for monitoring Runtime updates for a chain and how Events and Extrinsics definitions might have changed, consequently. The result of blockchain exploration is saved in a JSON file."),(0,i.kt)("p",null,'{% hint style="info" %}\nNote: in the context of this guide, we assume the ',(0,i.kt)("a",{parentName:"p",href:"/docs/tutorial/development-environment-set-up"},"Development Environment has been already set up")," and that ",(0,i.kt)("inlineCode",{parentName:"p"},"npm")," is used, although other options are available.\n{% endhint %}"),(0,i.kt)("p",null,"To install substrate metadata explorer tool, simply run this in a console."," "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @subsquid/squid-substrate-metadata-explorer\n")),(0,i.kt)("p",null,"Once installed, check available commands by running"," "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npx squid-substrate-metadata-explorer --help\n")),(0,i.kt)("p",null,"Which will print out a help."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Usage: squid-substrate-metadata-explorer squid-substrate-metadata-explorer --chain <ws://> --out <file> [options]\n\nExplores chain spec versions.\n\nIt scans the chain and finds all blocks where new spec version was introduced.\nThe result of exploration is saved in a json file:\n\n[\n    {\n        "specVersion": 1,\n        "blockNumber": 10,\n        "blockHash": "0x..",\n        "metadata": "0x.."\n    },\n    ...\n]\n\nIf the output file already exists, exploration will start from the last known block.\nThe resulting file will be updated with new data.\n\nOptions:\n  --chain <ws://>  chain rpc endpoint\n  --out <file>     output file\n  --archive <url>  squid substrate archive (significantly speedups exploration)\n  -h, --help       display help for command\n')),(0,i.kt)("h3",{id:"options-for-squid-substrate-metadata-explorer-command"},"Options for ",(0,i.kt)("inlineCode",{parentName:"h3"},"squid-substrate-metadata-explorer")," command"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Argument"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"),(0,i.kt)("th",{parentName:"tr",align:null},"Required"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"-h")," or ",(0,i.kt)("inlineCode",{parentName:"td"},"--help")),(0,i.kt)("td",{parentName:"tr",align:null},"display help for command"),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"--chain")),(0,i.kt)("td",{parentName:"tr",align:null},"chain RPC endpoint"),(0,i.kt)("td",{parentName:"tr",align:null},"yes")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"--out <file>")),(0,i.kt)("td",{parentName:"tr",align:null},"name of the file the output should be written to"),(0,i.kt)("td",{parentName:"tr",align:null},"yes")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"--archive <url>")),(0,i.kt)("td",{parentName:"tr",align:null},"squid substrate archive (significantly speedups exploration)"),(0,i.kt)("td",{parentName:"tr",align:null},"no")))),(0,i.kt)("h2",{id:"output-file-structure"},"Output file structure"),(0,i.kt)("p",null,"The output JSON file contains a series of objects, each representing the various spec versions encountered. It typically has this structure:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'[\n    {\n        "specVersion": 1,\n        "blockNumber": 10,\n        "blockHash": "0x..",\n        "metadata": "0x.."\n    },\n    ...\n]\n')),(0,i.kt)("p",null,"This is a brief description of the various fields:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Key"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"specVersion")),(0,i.kt)("td",{parentName:"tr",align:null},"version number of the encountered spec")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"blockNumber")),(0,i.kt)("td",{parentName:"tr",align:null},"number of the starting block of current spec")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"blockHash")),(0,i.kt)("td",{parentName:"tr",align:null},"hash of the starting block of the current spec")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"metadata")),(0,i.kt)("td",{parentName:"tr",align:null},"encoded metadata of the given spec")))),(0,i.kt)("p",null,"For a more in-depth explanation of the subject, head over to the ",(0,i.kt)("a",{parentName:"p",href:"/docs/key-concepts/typegen"},"dedicated page")," and for a practical guide, take a look at the ",(0,i.kt)("a",{parentName:"p",href:"/docs/recipes/running-a-squid/generate-typescript-definitions"},"dedicated Recipe"),"."," "))}m.isMDXComponent=!0}}]);