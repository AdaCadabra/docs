"use strict";(self.webpackChunksubsquid_docs=self.webpackChunksubsquid_docs||[]).push([[5816],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=u(n),h=a,m=d["".concat(s,".").concat(h)]||d[h]||c[h]||i;return n?r.createElement(m,l(l({ref:t},p),{},{components:n})):r.createElement(m,l({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var u=2;u<i;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},96438:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return h},frontMatter:function(){return o},metadata:function(){return u},toc:function(){return c}});var r=n(87462),a=n(63366),i=(n(67294),n(3905)),l=["components"],o={},s="Queries",u={unversionedId:"tutorial/graphql/queries",id:"tutorial/graphql/queries",title:"Queries",description:"Introduction",source:"@site/docs/tutorial/graphql/queries.md",sourceDirName:"tutorial/graphql",slug:"/tutorial/graphql/queries",permalink:"/docs/tutorial/graphql/queries",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial/graphql/queries.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Paginate query results",permalink:"/docs/tutorial/graphql/paginate-query-results"},next:{title:"Sorting",permalink:"/docs/tutorial/graphql/sorting"}},p={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Exploring queries",id:"exploring-queries",level:2},{value:"Simple entity queries",id:"simple-entity-queries",level:3},{value:"<strong>Fetch list of entities</strong>",id:"fetch-list-of-entities",level:4},{value:"<strong>Fetch an entity using its unique fields</strong>",id:"fetch-an-entity-using-its-unique-fields",level:4},{value:"Relation entity queries",id:"relation-entity-queries",level:3},{value:"Filter query results / search queries",id:"filter-query-results--search-queries",level:3},{value:"<strong>The <code>where</code> argument</strong>",id:"the-where-argument",level:4},{value:"<strong>Supported Scalar Types</strong>",id:"supported-scalar-types",level:4},{value:"<strong>Equality Operators (<code>_eq</code>)</strong>",id:"equality-operators-_eq",level:4},{value:"<strong>Greater than or less than operators (<code>gt</code>, <code>lt</code>, <code>gte</code>, <code>lte</code>)</strong>",id:"greater-than-or-less-than-operators-gt-lt-gte-lte",level:4},{value:"<strong>Text search or pattern matching operators (<code>_contains</code>, <code>_startsWith</code>, <code>_endsWith</code>)</strong>",id:"text-search-or-pattern-matching-operators-_contains-_startswith-_endswith",level:4}],d={toc:c};function h(e){var t=e.components,n=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"queries"},"Queries"),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"Squid CLI tooling auto-generates queries as part of the GraphQL schema from the input schema. It generates a range of possible queries and operators that also work with relationships defined in your input schema."),(0,i.kt)("p",null,"All entities of the input schema tracked by the cli (re-generation is required when any change happens to the input schema) can be queried over the GraphQL endpoint."),(0,i.kt)("h2",{id:"exploring-queries"},"Exploring queries"),(0,i.kt)("p",null,"You can explore the entire schema and the available queries using the GraphiQL interface by running the ",(0,i.kt)("inlineCode",{parentName:"p"},"graphql-server")," that comes with a Squid, or looking at the ",(0,i.kt)("inlineCode",{parentName:"p"},"graphql-server/generated/schema.graphql")," file."),(0,i.kt)("p",null,"Let\u2019s take a look at the different queries you can run using the GraphQL server. We\u2019ll use examples based on a typical channel/video schema for reference."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Simple entity queries"),(0,i.kt)("li",{parentName:"ul"},"Relation entity queries"),(0,i.kt)("li",{parentName:"ul"},"Filter query results / search queries"),(0,i.kt)("li",{parentName:"ul"},"Sort query results")),(0,i.kt)("h3",{id:"simple-entity-queries"},"Simple entity queries"),(0,i.kt)("p",null,"You can fetch a single entity or multiple entities of the same type using a simple entity query."),(0,i.kt)("h4",{id:"fetch-list-of-entities"},(0,i.kt)("strong",{parentName:"h4"},"Fetch list of entities")),(0,i.kt)("p",null,"Example: Fetch a list of channels:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"query {\n  channels {\n    id\n    handle\n  }\n}\n")),(0,i.kt)("h4",{id:"fetch-an-entity-using-its-unique-fields"},(0,i.kt)("strong",{parentName:"h4"},"Fetch an entity using its unique fields")),(0,i.kt)("p",null,"Example: Fetch a channel using by unique id:"),(0,i.kt)("p",null,'{% code title="" %}'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},'query Query1 {\n  channelByUniqueInput(where: { id: "1" }) {\n    id\n    handle\n  }\n}\n\nquery Query2 {\n  channelByUniqueInput(where: { handle: "Joy Channel" }) {\n    id\n    handle\n  \n')),(0,i.kt)("p",null,"{% endcode %}"),(0,i.kt)("h3",{id:"relation-entity-queries"},"Relation entity queries"),(0,i.kt)("p",null,"Please look at the cross-filters documentation."),(0,i.kt)("h3",{id:"filter-query-results--search-queries"},"Filter query results / search queries"),(0,i.kt)("h4",{id:"the-where-argument"},(0,i.kt)("strong",{parentName:"h4"},"The ",(0,i.kt)("inlineCode",{parentName:"strong"},"where")," argument")),(0,i.kt)("p",null,"You can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"where")," argument in your queries to filter results based on some field\u2019s values. You can even use multiple filters in the same where clause using the ",(0,i.kt)("inlineCode",{parentName:"p"},"AND")," or the ",(0,i.kt)("inlineCode",{parentName:"p"},"OR")," operators."),(0,i.kt)("p",null,"For example, to fetch data for a channel named ",(0,i.kt)("inlineCode",{parentName:"p"},"Joy Channel"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},'query {\n  channels(where: { handle_eq: "Joy Channel" }) {\n    id\n    handle\n  }\n}\n')),(0,i.kt)("h4",{id:"supported-scalar-types"},(0,i.kt)("strong",{parentName:"h4"},"Supported Scalar Types")),(0,i.kt)("p",null,"Squid supports following scalar types:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"String"),(0,i.kt)("li",{parentName:"ul"},"Int"),(0,i.kt)("li",{parentName:"ul"},"Float"),(0,i.kt)("li",{parentName:"ul"},"BigInt"),(0,i.kt)("li",{parentName:"ul"},"Boolean"),(0,i.kt)("li",{parentName:"ul"},"Bytes"),(0,i.kt)("li",{parentName:"ul"},"DateTime")),(0,i.kt)("h4",{id:"equality-operators-_eq"},(0,i.kt)("strong",{parentName:"h4"},"Equality Operators (",(0,i.kt)("inlineCode",{parentName:"strong"},"_eq"),")")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"_eq")," is supported by all the scalar types"),(0,i.kt)("p",null,"The following are examples of using this operator on different types:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Fetch a list of videos where ",(0,i.kt)("inlineCode",{parentName:"li"},"title"),' is "Bitcoin"'),(0,i.kt)("li",{parentName:"ol"},"Fetch a list of videos where ",(0,i.kt)("inlineCode",{parentName:"li"},"isExplicit"),' is "true"'),(0,i.kt)("li",{parentName:"ol"},"Fetch a list of videos ",(0,i.kt)("inlineCode",{parentName:"li"},"publishedOn"),' "2021-01-05"')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},'query Query1 {\n  videos(where: { title_eq: "Bitcoin" }) {\n    id\n    title\n  }\n}\n\nquery Query2 {\n  videos(where: { isExplicit_eq: true }) {\n    id\n    title\n  }\n}\n\nquery Query3 {\n  videos(where: { publishedOn_eq: "2021-01-05" }) {\n    id\n    title\n  }\n}\n')),(0,i.kt)("h4",{id:"greater-than-or-less-than-operators-gt-lt-gte-lte"},(0,i.kt)("strong",{parentName:"h4"},"Greater than or less than operators (",(0,i.kt)("inlineCode",{parentName:"strong"},"gt"),", ",(0,i.kt)("inlineCode",{parentName:"strong"},"lt"),", ",(0,i.kt)("inlineCode",{parentName:"strong"},"gte"),", ",(0,i.kt)("inlineCode",{parentName:"strong"},"lte"),")")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"_gt")," (greater than), ",(0,i.kt)("inlineCode",{parentName:"p"},"_lt")," (less than), ",(0,i.kt)("inlineCode",{parentName:"p"},"_gte")," (greater than or equal to), ",(0,i.kt)("inlineCode",{parentName:"p"},"_lte")," (less than or equal to) operators are available on ",(0,i.kt)("inlineCode",{parentName:"p"},"Int, BigInt, Float, DataTime")," types."),(0,i.kt)("p",null,"The following are examples of using these operators on different types:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},'Fetch a list of videos published before "2021-01-05"'),(0,i.kt)("li",{parentName:"ol"},'Fetch a list of channels before block "999"')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},'query Query1 {\n  videos(where: { publishedOn_gte: "2021-01-05" }) {\n    id\n    title\n  }\n}\n\nquery Query2 {\n  channels(where: { block_lte: "999" }) {\n    id\n    handle\n  }\n}\n')),(0,i.kt)("h4",{id:"text-search-or-pattern-matching-operators-_contains-_startswith-_endswith"},(0,i.kt)("strong",{parentName:"h4"},"Text search or pattern matching operators (",(0,i.kt)("inlineCode",{parentName:"strong"},"_contains"),", ",(0,i.kt)("inlineCode",{parentName:"strong"},"_startsWith"),", ",(0,i.kt)("inlineCode",{parentName:"strong"},"_endsWith"),")")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"_contains"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"_startsWith"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"_endsWith")," operators are used for pattern matching on string fields."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},'query Query1 {\n  videos(where: { title_contains: "Bitcoin" }) {\n    id\n    title\n  }\n}\n\nquery Query2 {\n  videos(where: { title_endsWith: "cryptocurrency" }) {\n    id\n    title\n  }\n}\n')))}h.isMDXComponent=!0}}]);