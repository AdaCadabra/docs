"use strict";(self.webpackChunksubsquid_docs=self.webpackChunksubsquid_docs||[]).push([[198],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return p}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},f={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=l(t),p=o,h=d["".concat(s,".").concat(p)]||d[p]||f[p]||a;return t?r.createElement(h,i(i({ref:n},u),{},{components:t})):r.createElement(h,i({ref:n},u))}));function p(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=d;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var l=2;l<a;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},79060:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return s},default:function(){return p},frontMatter:function(){return c},metadata:function(){return l},toc:function(){return f}});var r=t(87462),o=t(63366),a=(t(67294),t(3905)),i=["components"],c={},s="Handler functions",l={unversionedId:"reference/handler-functions/README",id:"reference/handler-functions/README",title:"Handler functions",description:"Handlers are a foundational ingredient of the Processor component of a Squid API. Sometimes referred to as Hooks, Handlers are, in simpler terms, functions whose execution is triggered by the Processor before (pre-Block hook) or after (post-Block hook) processing a block, or, alternatively, when the Processor encounters a previously configured Substrate Event or Substrate Extrinsic.",source:"@site/docs/reference/handler-functions/README.md",sourceDirName:"reference/handler-functions",slug:"/reference/handler-functions/",permalink:"/docs/reference/handler-functions/",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/reference/handler-functions/README.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"EVM Processor",permalink:"/docs/reference/evm-processor"},next:{title:"Context Interfaces",permalink:"/docs/reference/handler-functions/context-interfaces"}},u={},f=[],d={toc:f};function p(e){var n=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"handler-functions"},"Handler functions"),(0,a.kt)("p",null,"Handlers are a foundational ingredient of the Processor component of a Squid API. Sometimes referred to as ",(0,a.kt)("em",{parentName:"p"},"Hooks"),", Handlers are, in simpler terms, functions whose execution is triggered by the Processor before (pre-Block hook) or after (post-Block hook) processing a block, or, alternatively, when the Processor encounters a previously configured Substrate Event or Substrate Extrinsic."),(0,a.kt)("p",null,'The Processor class exposes methods to "attach" these Handlers to it and configure the type of occurrence that should trigger them.'),(0,a.kt)("p",null,'Each Handler "type" (',(0,a.kt)("inlineCode",{parentName:"p"},"EventHandler"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"ExtrinsicHandler"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"BlockHandler"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"EvmLogHandler"),") should expect one argument: the Context, which, depending on the type of Handler, has a slightly different structure. Luckily the SDK defines an Interface for each Handler and one for each Context."),(0,a.kt)("p",null,"This section of the Reference documentation will provide information on:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/reference/handler-functions/handler-interfaces"},"How to define and attach a ",(0,a.kt)("inlineCode",{parentName:"a"},"Handler")," function")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/reference/handler-functions/handler-options-interfaces"},"How to set a Range filter on a ",(0,a.kt)("inlineCode",{parentName:"a"},"Handler")," function")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/reference/handler-functions/context-interfaces"},"What kind of data is passed to a ",(0,a.kt)("inlineCode",{parentName:"a"},"Handler")," function")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/reference/handler-functions/runtime-upgrades"},"How the Subsquid SDK can help you deal with Runtime upgrades")),(0,a.kt)("li",{parentName:"ul"},"Caveats when working with proxied calls (util.batch and sudo extrinsics) \u2013 TBD in v5.1"," "),(0,a.kt)("li",{parentName:"ul"},"Logging and debugging best practices")))}p.isMDXComponent=!0}}]);