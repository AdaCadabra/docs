"use strict";(self.webpackChunksubsquid_docs=self.webpackChunksubsquid_docs||[]).push([[8755],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return u}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),h=c(n),u=o,f=h["".concat(l,".").concat(u)]||h[u]||d[u]||a;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},17743:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return d}});var r=n(87462),o=n(63366),a=(n(67294),n(3905)),i=["components"],s={},l="Handler Options Interfaces",c={unversionedId:"reference/handler-functions/handler-options-interfaces",id:"reference/handler-functions/handler-options-interfaces",title:"Handler Options Interfaces",description:"The previous pages discussed the different types of Handlers, their Interfaces, how they can be added to the Processor. When attaching a handler to the Processor, the Subsquid SDK also allows to provide options and it defines interface for them. Here are their definitions and how they can influence the Handler execution.",source:"@site/docs/reference/handler-functions/handler-options-interfaces.md",sourceDirName:"reference/handler-functions",slug:"/reference/handler-functions/handler-options-interfaces",permalink:"/docs/reference/handler-functions/handler-options-interfaces",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/reference/handler-functions/handler-options-interfaces.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Handler Interfaces",permalink:"/docs/reference/handler-functions/handler-interfaces"},next:{title:"Runtime upgrades",permalink:"/docs/reference/handler-functions/runtime-upgrades"}},p={},d=[{value:"<code>EventHandlerOptions</code>",id:"eventhandleroptions",level:2},{value:"<code>ExtrinsicHandlerOptions</code>",id:"extrinsichandleroptions",level:2},{value:"<code>BlockHookOptions</code>",id:"blockhookoptions",level:2},{value:"<code>EvmLogHandlerOptions</code>",id:"evmloghandleroptions",level:2}],h={toc:d};function u(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"handler-options-interfaces"},"Handler Options Interfaces"),(0,a.kt)("p",null,"The previous pages discussed the different types of Handlers, their Interfaces, how they can be added to the Processor. When attaching a handler to the Processor, the Subsquid SDK also allows to provide options and it defines interface for them. Here are their definitions and how they can influence the Handler execution."),(0,a.kt)("h2",{id:"eventhandleroptions"},(0,a.kt)("inlineCode",{parentName:"h2"},"EventHandlerOptions")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface EventHandlerOptions {\n    range?: Range\n}\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Range")," object in this context is an object containing two fields: ",(0,a.kt)("inlineCode",{parentName:"p"},"to")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"from"),". Similarly to how it is possible to restrain the execution of the Processor by ",(0,a.kt)("a",{parentName:"p",href:"/docs/reference/substrate-processor#start-block-global-execution-range"},"setting a block range"),", the same can be done with an ",(0,a.kt)("inlineCode",{parentName:"p"},"EventHandler"),"."),(0,a.kt)("p",null,"The ingestion loop, responsible to divide the blockchain exploration into batches, will sieve through all the subscribed Handlers, read their options and filter out those that specified a range that does not include the current batch of blocks."),(0,a.kt)("h2",{id:"extrinsichandleroptions"},(0,a.kt)("inlineCode",{parentName:"h2"},"ExtrinsicHandlerOptions")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface ExtrinsicHandlerOptions {\n    range?: Range\n    triggerEvents?: QualifiedName[]\n}\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Range")," object in this context is an object containing two fields: ",(0,a.kt)("inlineCode",{parentName:"p"},"to")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"from"),". Similarly to how it is possible to restrain the execution of the Processor by ",(0,a.kt)("a",{parentName:"p",href:"/docs/reference/substrate-processor#start-block-global-execution-range"},"setting a block range"),", the same can be done with an ",(0,a.kt)("inlineCode",{parentName:"p"},"EventHandler"),"."),(0,a.kt)("p",null,"The ingestion loop, responsible to divide the blockchain exploration into batches, will sieve through all the subscribed Handlers, read their options and filter out those that specified a range that does not include the current batch of blocks."),(0,a.kt)("h2",{id:"blockhookoptions"},(0,a.kt)("inlineCode",{parentName:"h2"},"BlockHookOptions")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface BlockHookOptions {\n    range?: Range\n}\n\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Range")," object in this context is an object containing two fields: ",(0,a.kt)("inlineCode",{parentName:"p"},"to")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"from"),". Similarly to how it is possible to restrain the execution of the Processor by ",(0,a.kt)("a",{parentName:"p",href:"/docs/reference/substrate-processor#start-block-global-execution-range"},"setting a block range"),", the same can be done with an ",(0,a.kt)("inlineCode",{parentName:"p"},"EventHandler"),"."),(0,a.kt)("p",null,"The ingestion loop, responsible to divide the blockchain exploration into batches, will sieve through all the subscribed Handlers, read their options and filter out those that specified a range that does not include the current batch of blocks."),(0,a.kt)("h2",{id:"evmloghandleroptions"},(0,a.kt)("inlineCode",{parentName:"h2"},"EvmLogHandlerOptions")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface EvmLogHandlerOptions {\n    range?: Range\n    /**\n     * EVM topic filter as defined by https://docs.ethers.io/v5/concepts/events/#events--filters\n     */\n    filter?: EvmTopicSet[]\n}\n\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Range")," object in this context is an object containing two fields: ",(0,a.kt)("inlineCode",{parentName:"p"},"to")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"from"),". Similarly to how it is possible to restrain the execution of the Processor by ",(0,a.kt)("a",{parentName:"p",href:"/docs/reference/substrate-processor#start-block-global-execution-range"},"setting a block range"),", the same can be done with an ",(0,a.kt)("inlineCode",{parentName:"p"},"EvmLogHandler"),"."),(0,a.kt)("p",null,"The ingestion loop, responsible to divide the blockchain exploration into batches, will sieve through all the subscribed Handlers, read their options and filter out those that specified a range that does not include the current batch of blocks."),(0,a.kt)("p",null,"In a similar way (like the comment suggests), EVM natively offers the ability to filter by ",(0,a.kt)("em",{parentName:"p"},"Topic"),", so that the Handler function is alerted only for a subset of Topics it is actually interested in."," "))}u.isMDXComponent=!0}}]);