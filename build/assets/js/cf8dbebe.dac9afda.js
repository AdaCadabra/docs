"use strict";(self.webpackChunksubsquid_docs=self.webpackChunksubsquid_docs||[]).push([[1778],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return h}});var n=r(67294);function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){s(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,s=function(e,t){if(null==e)return{};var r,n,s={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(s[r]=e[r]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var a=n.createContext({}),u=function(e){var t=n.useContext(a),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=u(e.components);return n.createElement(a.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,s=e.mdxType,o=e.originalType,a=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),m=u(r),h=s,d=m["".concat(a,".").concat(h)]||m[h]||l[h]||o;return r?n.createElement(d,i(i({ref:t},p),{},{components:r})):n.createElement(d,i({ref:t},p))}));function h(e,t){var r=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=r.length,i=new Array(o);i[0]=m;var c={};for(var a in t)hasOwnProperty.call(t,a)&&(c[a]=t[a]);c.originalType=e,c.mdxType="string"==typeof e?e:s,i[1]=c;for(var u=2;u<o;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},63647:function(e,t,r){r.r(t),r.d(t,{assets:function(){return p},contentTitle:function(){return a},default:function(){return h},frontMatter:function(){return c},metadata:function(){return u},toc:function(){return l}});var n=r(87462),s=r(63366),o=(r(67294),r(3905)),i=["components"],c={},a="Prometheus metrics",u={unversionedId:"recipes/running-a-squid/prometheus-metrics",id:"recipes/running-a-squid/prometheus-metrics",title:"Prometheus metrics",description:"The Subsquid SDK comes with Prometheus metrics to monitor synchronization status. When launching the processor, it is sufficient to specify the port at which metrics should be served via the environment variable PROCESSORPROMETHEUSPORT.",source:"@site/docs/recipes/running-a-squid/prometheus-metrics.md",sourceDirName:"recipes/running-a-squid",slug:"/recipes/running-a-squid/prometheus-metrics",permalink:"/docs/recipes/running-a-squid/prometheus-metrics",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/recipes/running-a-squid/prometheus-metrics.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Multi-chain processors",permalink:"/docs/recipes/running-a-squid/multi-chain-processors"},next:{title:"Schema updates",permalink:"/docs/recipes/running-a-squid/schema-updates"}},p={},l=[],m={toc:l};function h(e){var t=e.components,c=(0,s.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},m,c,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"prometheus-metrics"},"Prometheus metrics"),(0,o.kt)("p",null,"The Subsquid SDK comes with ",(0,o.kt)("a",{parentName:"p",href:"https://prometheus.io/"},"Prometheus")," metrics to monitor synchronization status. When launching the processor, it is sufficient to specify the port at which metrics should be served via the environment variable ",(0,o.kt)("inlineCode",{parentName:"p"},"PROCESSOR_PROMETHEUS_PORT"),"."),(0,o.kt)("p",null,"If not provided, a random port will be used and communicated at launch:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"\u21d2 node -r dotenv/config lib/processor.js\nPrometheus metrics are served at port 34491\nLast block: 9422743, mapping: 33 blocks/sec, ingest: 279 blocks/sec, eta: 9h 12m, progress: 81%\nLast block: 9423694, mapping: 41 blocks/sec, ingest: 217 blocks/sec, eta: 8h 37m, progress: 81%\nLast block: 9424679, mapping: 41 blocks/sec, ingest: 195 blocks/sec, eta: 8h 16m, progress: 81%\nLast block: 9425591, mapping: 43 blocks/sec, ingest: 218 blocks/sec, eta: 8h 10m, progress: 81%\nLast block: 9426588, mapping: 44 blocks/sec, ingest: 227 blocks/sec, eta: 7h 33m, progress: 81%\nLast block: 9427710, mapping: 48 blocks/sec, ingest: 182 blocks/sec, eta: 6h 57m, progress: 81%\n")),(0,o.kt)("p",null,"Then, it is sufficient to visit the ",(0,o.kt)("inlineCode",{parentName:"p"},"localhost:PROCESSOR_PROMETHEUS_PORT/metrics")," URL, in order to access Prometheus metrics:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Prometheus metrics",src:r(70444).Z,width:"2287",height:"1221"})),(0,o.kt)("p",null,"These can then be regularly polled to monitor the status and, for example, used in ",(0,o.kt)("a",{parentName:"p",href:"https://prometheus.io/docs/visualization/grafana/"},"Grafana dashboards"),"."))}h.isMDXComponent=!0},70444:function(e,t,r){t.Z=r.p+"assets/images/metrics-94317c81206f002a0742c05486a55f6c.png"}}]);