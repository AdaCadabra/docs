"use strict";(self.webpackChunksubsquid_docs=self.webpackChunksubsquid_docs||[]).push([[8002],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return y}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),u=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=u(e.components);return n.createElement(c.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=u(r),y=o,f=m["".concat(c,".").concat(y)]||m[y]||l[y]||a;return r?n.createElement(f,s(s({ref:t},p),{},{components:r})):n.createElement(f,s({ref:t},p))}));function y(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,s=new Array(a);s[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var u=2;u<a;u++)s[u]=r[u];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},73702:function(e,t,r){r.r(t),r.d(t,{assets:function(){return p},contentTitle:function(){return c},default:function(){return y},frontMatter:function(){return i},metadata:function(){return u},toc:function(){return l}});var n=r(87462),o=r(63366),a=(r(67294),r(3905)),s=["components"],i={},c="API Extensions",u={unversionedId:"reference/api-extensions",id:"reference/api-extensions",title:"API Extensions",description:"Squid alows to extend the GraphQL auto-generated schema with custom queries.",source:"@site/docs/reference/api-extensions.md",sourceDirName:"reference",slug:"/reference/api-extensions",permalink:"/docs/reference/api-extensions",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/reference/api-extensions.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Reference",permalink:"/docs/reference/"},next:{title:"EVM Processor",permalink:"/docs/reference/evm-processor"}},p={},l=[],m={toc:l};function y(e){var t=e.components,r=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"api-extensions"},"API Extensions"),(0,a.kt)("p",null,"Squid alows to extend the GraphQL auto-generated schema with custom queries.\nTo do that, one can define GraphQL ",(0,a.kt)("a",{parentName:"p",href:"https://www.apollographql.com/docs/tutorial/resolvers/"},"query resolvers")," in the designated module ",(0,a.kt)("inlineCode",{parentName:"p"},"src/server-extension/resolvers"),". Note that all resolver classes must be exported."),(0,a.kt)("p",null,"It is convenient to import ",(0,a.kt)("a",{parentName:"p",href:"https://typegraphql.com/docs/resolvers.html#"},"TypeGraphQL")," and use the annotations provided by the library to define the query arguments and return types."),(0,a.kt)("p",null,"Custom resolvers are typically used in combination with ",(0,a.kt)("a",{parentName:"p",href:"https://orkhan.gitbook.io/typeorm/docs/entity-manager-api"},"TypeORM EntityManager"),". It is automatically enabled by dependency injection when defined as a constructor argument. "),(0,a.kt)("p",null,"A custom resolver may then look as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Arg, Field, ObjectType, Query, Resolver } from 'type-graphql'\nimport type { EntityManager } from 'typeorm'\nimport { MyEntity } from '../../model/generated'\n\n// Define custom GraphQL ObjectType of the query result\n@ObjectType()\nexport class MyQueryResult {\n  @Field(() => Number, { nullable: false })\n  total!: number\n\n  @Field(() => Number, { nullable: false })\n  max!: number\n\n  constructor(props: Partial<MyQueryResult>) {\n    Object.assign(this, props);\n  }\n}\n\n@Resolver()\nexport class MyResolver {\n  // Set by depenency injection\n  constructor(private tx: () => Promise<EntityManager>) {}\n\n  @Query(() => [MyQueryResult])\n  async myQuery(): Promise<MyQueryResult[]> {\n    const manager = await this.tx()\n    // execute custom SQL query\n    const result: = await manager.getRepository(MyEntity).query(\n      `SELECT \n        COUNT(x) as total, \n        MAX(y) as max\n      FROM my_entity \n      GROUP BY month`)\n    return result\n  }\n}\n")),(0,a.kt)("p",null,"Some great examples of custom Squid resolvers can be spotted in the wild in the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/kodadot/rubick/tree/main/src/server-extension"},"Rubik repo")," by KodaDot."),(0,a.kt)("p",null,"For more examples of resolvers, see ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/MichalLytek/type-graphql/tree/master/examples"},"TypeGraphQL repo")))}y.isMDXComponent=!0}}]);