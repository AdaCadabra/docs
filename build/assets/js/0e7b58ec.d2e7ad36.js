"use strict";(self.webpackChunksubsquid_docs=self.webpackChunksubsquid_docs||[]).push([[6306],{3905:function(n,t,e){e.d(t,{Zo:function(){return l},kt:function(){return p}});var a=e(67294);function i(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function r(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,a)}return e}function o(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?r(Object(e),!0).forEach((function(t){i(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):r(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function c(n,t){if(null==n)return{};var e,a,i=function(n,t){if(null==n)return{};var e,a,i={},r=Object.keys(n);for(a=0;a<r.length;a++)e=r[a],t.indexOf(e)>=0||(i[e]=n[e]);return i}(n,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(a=0;a<r.length;a++)e=r[a],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(i[e]=n[e])}return i}var s=a.createContext({}),d=function(n){var t=a.useContext(s),e=t;return n&&(e="function"==typeof n?n(t):o(o({},t),n)),e},l=function(n){var t=d(n.components);return a.createElement(s.Provider,{value:t},n.children)},u={inlineCode:"code",wrapper:function(n){var t=n.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(n,t){var e=n.components,i=n.mdxType,r=n.originalType,s=n.parentName,l=c(n,["components","mdxType","originalType","parentName"]),m=d(e),p=i,g=m["".concat(s,".").concat(p)]||m[p]||u[p]||r;return e?a.createElement(g,o(o({ref:t},l),{},{components:e})):a.createElement(g,o({ref:t},l))}));function p(n,t){var e=arguments,i=t&&t.mdxType;if("string"==typeof n||i){var r=e.length,o=new Array(r);o[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=n,c.mdxType="string"==typeof n?n:i,o[1]=c;for(var d=2;d<r;d++)o[d]=e[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,e)}m.displayName="MDXCreateElement"},32815:function(n,t,e){e.r(t),e.d(t,{assets:function(){return l},contentTitle:function(){return s},default:function(){return p},frontMatter:function(){return c},metadata:function(){return d},toc:function(){return u}});var a=e(87462),i=e(63366),r=(e(67294),e(3905)),o=["components"],c={description:"Introducing the Giant Squid API, a single endpoint containing data from multiple chains and parachains"},s="Giant Squid API",d={unversionedId:"recipes/giant-squid-api/README",id:"recipes/giant-squid-api/README",title:"Giant Squid API",description:"Introducing the Giant Squid API, a single endpoint containing data from multiple chains and parachains",source:"@site/docs/recipes/giant-squid-api/README.md",sourceDirName:"recipes/giant-squid-api",slug:"/recipes/giant-squid-api/",permalink:"/docs/recipes/giant-squid-api/",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/recipes/giant-squid-api/README.md",tags:[],version:"current",frontMatter:{description:"Introducing the Giant Squid API, a single endpoint containing data from multiple chains and parachains"},sidebar:"tutorialSidebar",previous:{title:"Updating a Squid",permalink:"/docs/recipes/deploying-a-squid/updating-a-squid"},next:{title:"Client example",permalink:"/docs/recipes/giant-squid-api/client-example"}},l={},u=[{value:"Overview",id:"overview",level:2},{value:"API schema",id:"api-schema",level:2}],m={toc:u};function p(n){var t=n.components,e=(0,i.Z)(n,o);return(0,r.kt)("wrapper",(0,a.Z)({},m,e,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"giant-squid-api"},"Giant Squid API"),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"The subject of this guide is not how to build a Squid API project, but rather how to use one particular kind of Squid API."),(0,r.kt)("p",null,"The Giant Squid API is a project developed by Subsquid, aimed ad uniting smaller Squids into a one single GraphQL endpoint."),(0,r.kt)("h2",{id:"api-schema"},"API schema"),(0,r.kt)("p",null,"Each one of the smaller APIs is indexing a different chain or parachain, but they all have a common schema, or at least a subset of the same common schema."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Account schema"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Account")," entity can be used to get info about current account state and collect account actions."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'type Account @entity {\n  id: ID!\n  \n  transfers: [AccountTransfer!] @derivedFrom(field: "account")\n  \n  contributions: [Contribution!] @derivedFrom(field: "account")\n  crowdloans: [Contributor!] @derivedFrom(field: "account") # crowdloans there account get participation\n  \n  stakingInfo: StakingInfo @derivedFrom(field: "stash")\n  activeBond: BigInt! # current bond balance\n  totalReward: BigInt!\n  totalSlash: BigInt!\n  rewards: [Reward!] @derivedFrom(field: "account")\n  slashes: [Slash!] @derivedFrom(field: "account")\n  bonds: [Bond!] @derivedFrom(field: "account")\n  validatorHistory: [EraValidator!] @derivedFrom(field: "stash") # validator history for each era\n  nominatorHistory: [EraNominator!] @derivedFrom(field: "stash") # nominator history for each era\n\n  lastUpdateBlock: BigInt!\n}\n'))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Transfers schema"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"enum TransferDicrection {\n  FROM\n  TO\n}\n\ntype Transfer implements Item & CanFail @entity {\n  id: ID!\n  timestamp: DateTime\n  blockNumber: BigInt @index\n  extrinsicHash: String @index\n  to: Account!\n  from: Account!\n  amount: BigInt\n  success: Boolean @index\n}\n\n# entity for linking account and transfer\ntype AccountTransfer @entity {\n  id: ID!\n  transfer: Transfer\n  account: Account!\n  direction: TransferDicrection\n}\n"))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Staking schema"),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"https://docs.substrate.io/rustdocs/latest/pallet_staking/index.html"},"Substrate docs about Staking")," for more information."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'enum StakingRole {\n  Validator\n  Nominator\n  Idle\n}\n\nenum PayeeType {\n  Staked\n  Stash\n  Controller\n  Account\n  None\n}\n\n# current information about stash, controller, payee and staking role\ntype StakingInfo @entity {\n  id: ID! #stash Id\n  stash: Account! @unique\n  controller: Account!\n  payee: Account\n  payeeType: PayeeType!\n  role: StakingRole!\n  commission: Int\n}\n\n# information about era, validators and nominators \ntype Era @entity {\n  id: ID!\n  index: Int!\n  timestamp: DateTime!\n  startedAt: Int!\n  endedAt: Int\n  total: BigInt!\n  validatorsCount: Int!\n  nominatorsCount: Int!\n  validators: [EraValidator] @derivedFrom(field: "era")\n  nominators: [EraNominator] @derivedFrom(field: "era")\n}\n\ntype EraStakingPair @entity {\n  id: ID! #era + validatorId + nominatorId\n  era: Era!\n  nominator: EraNominator\n  validator: EraValidator\n  vote: BigInt!\n}\n\n# information about validator in era: self/total bond, nominators and their votes\ntype EraValidator @entity {\n  id: ID! #era + stashId\n  stash: Account!\n  era: Era!\n  selfBonded: BigInt!\n  totalBonded: BigInt!\n  commission: Int\n  nominators: [EraStakingPair] @derivedFrom(field: "validator")\n}\n\n# information about nominator in era:\n# bond, validators and votes for them in each era\ntype EraNominator @entity {\n  id: ID! #era + stashId\n  stash: Account!\n  era: Era!\n  bonded: BigInt!\n  validators: [EraStakingPair] @derivedFrom(field: "nominator")\n}\n\n\ntype Reward implements Item & HasTotal & HasEra @entity  {\n  id: ID!\n  timestamp: DateTime\n  blockNumber: BigInt @index\n  extrinsicHash: String @index\n  account: Account!\n  amount: BigInt\n  era: Int\n  validator: String\n  total: BigInt\n  # only for dApps-staking\n  smartConstract: String\n}\n\ntype Slash implements Item & HasTotal & HasEra @entity  {\n  id: ID!\n  timestamp: DateTime\n  blockNumber: BigInt @index\n  extrinsicHash: String @index\n  account: Account!\n  amount: BigInt\n  era: Int\n  total: BigInt\n}\n\nenum BondType {\n  Bond\n  Unbond\n}\n\ntype Bond implements Item & HasTotal & CanFail @entity  {\n  id: ID!\n  timestamp: DateTime\n  blockNumber: BigInt @index\n  extrinsicHash: String @index\n  account: Account!\n  amount: BigInt\n  total: BigInt\n  success: Boolean @index\n  type: BondType\n  # only for parachain-staking\n  candidate: String\n  # only for dApps-staking\n  smartConstract: String\n}\n'))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Crowdloans schema"),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"https://wiki.polkadot.network/docs/learn-crowdloans"},"Polkadot documentation on Crowdloans")," for more information."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'# information about known parachains and their crowdloans\ntype Parachain @entity {\n  id: ID! #paraId\n  name: String\n  paraId: Int\n  crowdloans: [Crowdloan!] @derivedFrom(field: "parachain")\n  relayChain: String\n}\n\nenum CrowdloanStatus {\n  CREATED\n  WON\n  DISSOLVED\n}\n\ntype Contributor @entity {\n  id: ID!\n  crowdloan: Crowdloan!\n  account: Account!\n  amount: BigInt!\n}\n\n# information about known crowdloans.\ntype Crowdloan @entity {\n  id: ID!\n  cap: BigInt!\n  firstPeriod: BigInt!\n  lastPeriod: BigInt!\n  end: BigInt!\n  contributors: [Contributor!] @derivedFrom(field: "crowdloan")\n  raised: BigInt!\n  parachain: Parachain\n  blockNumber: BigInt @index\n  createdAt: DateTime\n}\n\ntype Contribution implements Item & CanFail @entity {\n  id: ID!\n  timestamp: DateTime\n  blockNumber: BigInt @index\n  extrinsicHash: String @index\n  crowdloan: Crowdloan\n  success: Boolean @index\n  account: Account!\n  amount: BigInt\n}\n'))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Interfaces"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"interface Item {\n  timestamp: DateTime\n  blockNumber: BigInt\n  extrinsicHash: String\n  amount: BigInt\n}\n\ninterface HasTotal {\n  total: BigInt\n}\n\ninterface HasEra {\n  era: Int\n}\n\ninterface CanFail {\n  success: Boolean\n}\n"))))}p.isMDXComponent=!0}}]);