"use strict";(self.webpackChunksubsquid_docs=self.webpackChunksubsquid_docs||[]).push([[2637],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return u}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=l(n),u=a,m=p["".concat(s,".").concat(u)]||p[u]||f[u]||o;return n?r.createElement(m,c(c({ref:t},d),{},{components:n})):r.createElement(m,c({ref:t},d))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,c=new Array(o);c[0]=p;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,c[1]=i;for(var l=2;l<o;l++)c[l]=n[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},32710:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return f}});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),c=["components"],i={},s="Context Interfaces",l={unversionedId:"reference/handler-functions/context-interfaces",id:"reference/handler-functions/context-interfaces",title:"Context Interfaces",description:"As mentioned in the parent page, the Subsquid SDK defines three interfaces for the Context objects passed to each Handler function. Here is the detailed reference for each one.",source:"@site/docs/reference/handler-functions/context-interfaces.md",sourceDirName:"reference/handler-functions",slug:"/reference/handler-functions/context-interfaces",permalink:"/docs/reference/handler-functions/context-interfaces",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/reference/handler-functions/context-interfaces.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Handler functions",permalink:"/docs/reference/handler-functions/"},next:{title:"Handler Interfaces",permalink:"/docs/reference/handler-functions/handler-interfaces"}},d={},f=[{value:"<code>EventHandlerContext</code>",id:"eventhandlercontext",level:2},{value:"<code>ExtrinsicHandlerContext</code>",id:"extrinsichandlercontext",level:2},{value:"<code>BlockHandlerContext</code>",id:"blockhandlercontext",level:2},{value:"<code>EvmLogHandlerContext</code>",id:"evmloghandlercontext",level:2}],p={toc:f};function u(e){var t=e.components,n=(0,a.Z)(e,c);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"context-interfaces"},"Context Interfaces"),(0,o.kt)("p",null,"As mentioned in the parent page, the Subsquid SDK defines three interfaces for the Context objects passed to each Handler function. Here is the detailed reference for each one."),(0,o.kt)("h2",{id:"eventhandlercontext"},(0,o.kt)("inlineCode",{parentName:"h2"},"EventHandlerContext")),(0,o.kt)("p",null,"Below is the definition of the interface:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface EventHandlerContext {\n    store: Store\n    block: SubstrateBlock\n    event: SubstrateEvent\n    extrinsic?: SubstrateExtrinsic\n    /**\n     * Not yet public description of chain metadata\n     * @internal\n     */\n    _chain: Chain\n}\n")),(0,o.kt)("p",null,"This way, when the ",(0,o.kt)("inlineCode",{parentName:"p"},"EventHandler")," is executing, it is able to extract Event and even Extrinsic and Block information from the Context and use the ",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/store-interface"},"Store interface")," to potentially persist processed data."),(0,o.kt)("p",null,"Developers can use this object in their ",(0,o.kt)("inlineCode",{parentName:"p"},"EventHandler")," functions like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"async function balancesTransfer(ctx: EventHandlerContext): Promise<void> {\n    let transfer = getTransferEvent(ctx)\n    let tip = ctx.extrinsic?.tip || 0n\n    let from = ss58.codec('kusama').encode(transfer.from)\n    let to = ss58.codec('kusama').encode(transfer.to)\n\n    let fromAcc = await getOrCreate(ctx.store, Account, from)\n    fromAcc.balance = fromAcc.balance || 0n\n    fromAcc.balance -= transfer.amount\n    fromAcc.balance -= tip\n    await ctx.store.save(fromAcc)\n\n    const toAcc = await getOrCreate(ctx.store, Account, to)\n    toAcc.balance = toAcc.balance || 0n\n    toAcc.balance += transfer.amount\n    await ctx.store.save(toAcc)\n\n    await ctx.store.save(new HistoricalBalance({\n        id: ctx.event.id + '-to',\n        account: fromAcc,\n        balance: fromAcc.balance,\n        date: new Date(ctx.block.timestamp)\n    }))\n\n    await ctx.store.save(new HistoricalBalance({\n        id: ctx.event.id + '-from',\n        account: toAcc,\n        balance: toAcc.balance,\n        date: new Date(ctx.block.timestamp)\n    }))\n}\n\ninterface TransferEvent {\n    from: Uint8Array\n    to: Uint8Array\n    amount: bigint\n}\n\n\nfunction getTransferEvent(ctx: EventHandlerContext): TransferEvent {\n    let event = new BalancesTransferEvent(ctx)\n    if (event.isV1020) {\n        let [from, to, amount] = event.asV1020\n        return {from, to, amount}\n    } else if (event.isV1050) {\n        let [from, to, amount] = event.asV1050\n        return {from, to, amount}\n    } else {\n        return event.asLatest\n    }\n}\n")),(0,o.kt)("p",null,"Where the ",(0,o.kt)("inlineCode",{parentName:"p"},"BalancesTransferEvent")," is a type-safe wrapper class, automatically generated, thanks to the ",(0,o.kt)("a",{parentName:"p",href:"/docs/key-concepts/typegen"},(0,o.kt)("inlineCode",{parentName:"a"},"typegen")," tool")," provided by the SDK."),(0,o.kt)("h2",{id:"extrinsichandlercontext"},(0,o.kt)("inlineCode",{parentName:"h2"},"ExtrinsicHandlerContext")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"ExtrinsicHandlerContext")," is very similar to the ",(0,o.kt)("inlineCode",{parentName:"p"},"EventHandlerContext")," interface. As a matter of fact, it is an extension of it, which only makes the ",(0,o.kt)("inlineCode",{parentName:"p"},"extrinsic")," field mandatory."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface ExtrinsicHandlerContext extends EventHandlerContext {\n    extrinsic: SubstrateExtrinsic\n}\n")),(0,o.kt)("p",null,"As for how to use this, in the previous paragraph example, the line"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"let tip = ctx.extrinsic?.tip || 0n\n")),(0,o.kt)("p",null,"Already uses the ",(0,o.kt)("inlineCode",{parentName:"p"},"extrinsic")," field."),(0,o.kt)("h2",{id:"blockhandlercontext"},(0,o.kt)("inlineCode",{parentName:"h2"},"BlockHandlerContext")),(0,o.kt)("p",null,"Here is the definition of the ",(0,o.kt)("inlineCode",{parentName:"p"},"BlockHandlerContext")," interface:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface BlockHandlerContext {\n    store: Store\n    block: SubstrateBlock\n    events: SubstrateEvent[]\n    /**\n     * Not yet public description of chain metadata\n     * @internal\n     */\n    _chain: Chain\n}\n")),(0,o.kt)("h2",{id:"evmloghandlercontext"},(0,o.kt)("inlineCode",{parentName:"h2"},"EvmLogHandlerContext")),(0,o.kt)("p",null,"Below is the definition of the interface:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface EvmLogHandlerContext {\n    topics: EvmTopic[]\n    data: string\n    txHash: string\n    contractAddress: EvmContractAddress\n    substrate: {\n        _chain: Chain,\n        event: SubstrateEvent,\n        block: SubstrateBlock,\n        extrinsic?: SubstrateExtrinsic\n    }\n    store: Store\n}\n")),(0,o.kt)("p",null,"This way, when the ",(0,o.kt)("inlineCode",{parentName:"p"},"EvmLogHandler")," is executing, it is able to extract EVM specific data, as well as Event and even Extrinsic and Block information from the Context and use the ",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/store-interface"},"Store interface")," to potentially persist processed data."),(0,o.kt)("p",null,"Developers can use this object in their ",(0,o.kt)("inlineCode",{parentName:"p"},"EvmvLogHandler")," functions like this (for more information about line #2, please take a look at the ",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/evm-processor#abi-interface-and-decoding"},"EVM Processor page"),"):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"async fuction evmTransfer (ctx: EvmLogHandlerContext ): Promise<void> {\n    let transfer = erc721.events['Transfer(address,address,uint256)'].decode(ctx)\n\n    let from = await ctx.store.get(Owner, transfer.from)\n    if (from == null) {\n        from = new Owner({id: transfer.from, balance: 0n})\n        await ctx.store.save(from)\n    }\n\n    let to = await ctx.store.get(Owner, transfer.to)\n    if (to == null) {\n        to = new Owner({id: transfer.to, balance: 0n})\n        ctx.store.save(to)\n    }\n\n    let token = await ctx.store.get(Token, transfer.tokenId.toString())\n    if (token == null) {\n        token = new Token({\n            id: transfer.tokenId.toString(),\n            uri: await contract.tokenURI(transfer.tokenId),\n            contract: await getContractEntity(ctx),\n            owner: to\n        })\n        await ctx.store.save(token)\n    } else {\n        token.owner = to\n        await ctx.store.save(token)\n    }\n\n    await ctx.store.save(new Transfer({\n        id: ctx.txHash,\n        token,\n        from,\n        to,\n        timestamp: BigInt(ctx.substrate.block.timestamp),\n        block: ctx.substrate.block.height,\n        transactionHash: ctx.txHash\n    }))\n}\n")))}u.isMDXComponent=!0}}]);